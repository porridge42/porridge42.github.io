<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.基本语法</title>
    <url>/2022/10/26/PHP/1.%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="PHP的基本语法"><a href="#PHP的基本语法" class="headerlink" title="PHP的基本语法"></a>PHP的基本语法</h2><ol>
<li>PHP脚本以<code>&lt;?php</code>开始，以<code>?&gt;</code>结束 </li>
<li>PHP脚本可以放在文档中的任何位置</li>
<li>PHP通常包含HTML标签和PHP脚本代码</li>
<li>注释语法同C<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My first PHP page&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Php</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>1.变量</title>
    <url>/2022/10/26/PHP/2.%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="PHP变量命名规则"><a href="#PHP变量命名规则" class="headerlink" title="PHP变量命名规则:"></a>PHP变量命名规则:</h3><ol>
<li>变量名以$符号开始，后面才是变量名</li>
<li>变量名的规范同C</li>
<li>PHP变量不需声明，变量在第一次被声明是时候创建</li>
<li>PHP属于弱类型语言，会根据变量的值自动转换数据类型</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10.5</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h3><p><strong>在函数内访问全局变量需要使用到global关键字</strong><br>语法:在变量前加上global关键字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>补充:PHP的所有全局变量存储在一个名为$GLOBAL[index]的数组里,index为保存变量的变量名，也可以通过在函数里直接访问这个数组来使用全局变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();    <span class="comment">//输出15</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>用于在函数里声明全局变量，使其拥有全局作用域</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="variable">$x</span>++;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;    <span class="comment">// 换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">myTest</span>();    <span class="comment">//输出0</span></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();    <span class="comment">//输出1</span></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();    <span class="comment">//输出2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Php</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P3_视频的采集与保存</title>
    <url>/2023/10/22/OpenCV/3_%E8%A7%86%E9%A2%91%E7%9A%84%E9%87%87%E9%9B%86%E4%B8%8E%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h2 id="视频采集"><a href="#视频采集" class="headerlink" title="视频采集"></a>视频采集</h2><ul>
<li><p>视频是有图片组成的，视频的每一帧就是一幅图片，一般是30帧，表示一秒显示30张图片。</p>
</li>
<li><p>使用cv2.VideoCapture方法可以捕获摄像头，用数字来表示不同的设备，比如0, 1。</p>
</li>
<li><p>如果要读取的是视频文件，直接给定路径即可。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开视频文件</span></span><br><span class="line">vc = cv2.VideoCapture(<span class="string">&#x27;./1.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获摄像头画面</span></span><br><span class="line">vc = cv2.VideoCapture(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用.isOpened()方法检测是否打开</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> vc.isOpened():</span><br><span class="line">	<span class="comment"># 读取视频的一帧</span></span><br><span class="line">	<span class="built_in">open</span>, fream = vc.read()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">open</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="捕获摄像头代码"><a href="#捕获摄像头代码" class="headerlink" title="捕获摄像头代码"></a>捕获摄像头代码</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取摄像头示例</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;video&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;video&#x27;</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果打开失败，不会报错</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环读取摄像头的每一帧</span></span><br><span class="line"><span class="comment">#while True:</span></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    <span class="comment"># 读一帧数据，返回标记和这一帧数据，True表示读到了数据，False表示没读到数据</span></span><br><span class="line">    flag, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以根据flag做个判断</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="comment"># 没读到数据，直接退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示数据</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;video&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    key = cv2.waitKey(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">if</span> key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别忘了释放资源</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="读取视频文件代码"><a href="#读取视频文件代码" class="headerlink" title="读取视频文件代码"></a>读取视频文件代码</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取视频文件示例</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;video&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;video&#x27;</span>, <span class="number">1280</span>, <span class="number">720</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果打开失败，不会报错</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&#x27;./test_1.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环读取视频的每一帧</span></span><br><span class="line"><span class="comment">#while True:</span></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    <span class="comment"># 读一帧数据，返回标记和这一帧数据，True表示读到了数据，False表示没读到数据</span></span><br><span class="line">    flag, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以根据flag做个判断</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="comment"># 没读到数据，直接退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示数据</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;video&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 30帧就是一秒30张，每秒间隔为1000/30(ms) (因为waitKey()函数只接受整形参数，所以这里用双杠除)</span></span><br><span class="line">    key = cv2.waitKey(<span class="number">1000</span> // <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">if</span> key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别忘了释放资源</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h2 id="视频文件保存"><a href="#视频文件保存" class="headerlink" title="视频文件保存"></a>视频文件保存</h2><ul>
<li>使用VideoWriter()方法保存视频为文件，参数列表:VideoWriter(输出文件名, 文件格式(fourcc), 帧率, 分辨率)</li>
<li>write编写并别入缓存</li>
<li>release缓存内容写入磁盘，并释放资源</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;frame&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;frame&#x27;</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line"></span><br><span class="line">vm = cv2.VideoWriter(<span class="string">&#x27;output.mp4&#x27;</span>, fourcc, <span class="number">30</span>, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    flag, frame  = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法检测到输入帧，程序已退出!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    vm.write(frame)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">cap.release()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放VideoWriter</span></span><br><span class="line">vm.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>人工智能</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>P1_创建显示窗口</title>
    <url>/2023/10/22/OpenCV/1_%E5%88%9B%E5%BB%BA%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="创建和显示窗口"><a href="#创建和显示窗口" class="headerlink" title="创建和显示窗口"></a>创建和显示窗口</h2><p><strong>api函数：</strong></p>
<ul>
<li>namedWindow() 创建命名窗口</li>
<li>imshow() 显示窗口</li>
<li>destoryAllWindows() 摧毁窗口</li>
<li>resizeWindows() 改变窗口大小</li>
<li>waitKey() 等待用户输入</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line"><span class="comment">#cv2.namedWindow(&#x27;window&#x27;, cv2.WINDOW_AUTOSIZE)</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;window&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line"><span class="comment"># 更改窗口的大小(要求窗口flag属性必须为cv2.WINDOW_NORMAL)</span></span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;window&#x27;</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 展示名字为window的窗口</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;window&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 等待按键</span></span><br><span class="line"><span class="comment"># waitKey返回按键的ascii值</span></span><br><span class="line"><span class="comment"># 0表示接受任意按键，如果给其他的整数，表示等待按键的时间，单位是毫秒</span></span><br><span class="line"><span class="comment"># 可以利用waitKey来销毁窗口，不用每次都重启Python</span></span><br><span class="line">key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>人工智能</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>P2_读取与保存</title>
    <url>/2023/10/22/OpenCV/2_%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h2 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像"></a>加载图像</h2><ul>
<li>imread(path, flag): 使用imread可以读取图片，默认读取的是彩色图片<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./cat.jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>imread加载的图像格式:ndarray</li>
<li>opencv的默认色彩空间为BGR<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./1.png&#x27;</span>)</span><br><span class="line">plt.imshow(img)</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20231022164456.png"></li>
<li>使用plt显示图片，发现颜色显示不正常</li>
<li>原因为cv中默认色彩空间为BGR而plt中是RGB</li>
<li>尽量不要使用别的方式展示opencv的图片，使用cv.imshow()方法展示就不会出问题<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20231022165136.png"></li>
</ul>
<h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><ul>
<li>imwrite(path, img): 使用imwrite保存图片.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;img&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;img&#x27;</span>, <span class="number">320</span>, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./1.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用while循环优化退出逻辑</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line">    key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> (key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span>(key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>)):</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;./123.png&#x27;</span>, img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;图像已保存！\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>人工智能</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>4.PHP EOF(hesrdoc)</title>
    <url>/2022/10/26/PHP/4.PHP%20EOF(heredoc)/</url>
    <content><![CDATA[<h3 id="PHP-EOF-heredoc-使用说明"><a href="#PHP-EOF-heredoc-使用说明" class="headerlink" title="PHP EOF(heredoc) 使用说明:"></a>PHP EOF(heredoc) 使用说明:</h3><ul>
<li>heredoc是一种定义字符串的方法</li>
<li>使用概述:<ol>
<li>结束表示吼必须要有分号，否则编译不通过</li>
<li>EOF在这里是标识符，可以用其他标识符代替</li>
<li><strong>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。</strong></li>
<li>开始标识带双引号或不带时会解释内嵌的变量和转移符号，<strong>带单引号时则不解释内嵌的变量和转义符号</strong></li>
<li>内容需要内嵌引号时不需要加转义符号<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我的第一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
注:</li>
</ol>
</li>
<li>结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号</li>
<li>可以使用不同的标识符，但不能出现在正文中</li>
<li>标识符之间的变量可以被解析，但函数不可以</li>
<li>变量之间不需要连接符.或者,拼接</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="string">&quot;runoob&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        &quot;abc&quot;<span class="subst">$name</span></span></span><br><span class="line"><span class="string">        &quot;123&quot;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Php</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>3.echo语句和print语句</title>
    <url>/2022/10/26/PHP/3.echo%E8%AF%AD%E5%8F%A5%E5%92%8Cprint%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h3 id="echo和print"><a href="#echo和print" class="headerlink" title="echo和print"></a>echo和print</h3><ol>
<li>相同点:<br> echo和print都可以输出字符串和变量</li>
<li>区别:<ul>
<li>echo - 可以输出一个或多个字符串</li>
<li>print - 只允许输出一个字符串，返回值总为 1</li>
</ul>
</li>
</ol>
<p>注:echo的输出素的比print快,且echo没有返回值,而print又返回值,返回值为1。</p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo的使用格式可以加括号，也可以不加括号，echo或echo()</p>
<p><strong>显示字符串:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;</span>;    <span class="comment">//字符串可以包含HTML标签</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello world!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我要学 PHP!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;这是一个&quot;</span>, <span class="string">&quot;字符串，&quot;</span>, <span class="string">&quot;使用了&quot;</span>, <span class="string">&quot;多个&quot;</span>, <span class="string">&quot;参数。&quot;</span>;    <span class="comment">//此处为显示多格字符串的情况,输出字符串之间相连接且没有空格</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>显示变量:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt1</span>=<span class="string">&quot;学习 PHP&quot;</span>;</span><br><span class="line"><span class="variable">$txt2</span>=<span class="string">&quot;RUNOOB.COM&quot;</span>;</span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;在 <span class="subst">$txt2</span> 学习 PHP &quot;</span>;     <span class="comment">//变量可以直接出入字符串，相当于占位符</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我车的品牌是 <span class="subst">&#123;$cars[0]&#125;</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><ul>
<li>print同样是一个语句结构，同样可以带括号也可以不带括号</li>
<li>使用方法同echo,包括字符串支持HTML标签和变量名的特性</li>
</ul>
]]></content>
      <categories>
        <category>Php</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>1_变量和字符串</title>
    <url>/2022/10/26/Python/1_%E5%8F%98%E9%87%8F%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>新建变量：<br><code>x = 3  # = 表示赋值</code></p>
<p>访问变量:<br><code>print(x) </code></p>
<p><strong>Python的变量命名规范：</strong><br>可以以字母数字，和下划线构成，但不能以数字打头</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Python可以使用单引号或者双引号来声明字符串：<br><code>print(&quot;Let&#39;s go!&quot;)</code><br>或者<br><code>print(&#39;&quot;Life is short, you need Python.&quot;&#39;)</code><br>用以避免字符串利用到单引号或者双引号</p>
<h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><p>在字符串的前面加上一个r意表示原始字符串<br>可以用来屏蔽字符串里的转义字符：<br><code>print（r&quot;D:\three\two\one\now&quot;）#此处反斜杠表示文件路径不是转义字符</code></p>
<h3 id="长字符串"><a href="#长字符串" class="headerlink" title="长字符串"></a>长字符串</h3><p>使用三个双引号申明长字符串，可以包含换行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poetry = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">从明天起，做一个幸福的人</span></span><br><span class="line"><span class="string">喂马、劈柴，周游世界</span></span><br><span class="line"><span class="string">从明天起，关心粮食和蔬菜</span></span><br><span class="line"><span class="string">我有一所房子，面朝大海，春暖花开</span></span><br><span class="line"><span class="string">书法作品</span></span><br><span class="line"><span class="string">书法作品</span></span><br><span class="line"><span class="string">从明天起，和每一个亲人通信</span></span><br><span class="line"><span class="string">告诉他们我的幸福</span></span><br><span class="line"><span class="string">那幸福的闪电告诉我的</span></span><br><span class="line"><span class="string">我将告诉每一个人</span></span><br><span class="line"><span class="string">给每一条河每一座山取一个温暖的名字</span></span><br><span class="line"><span class="string">陌生人，我也为你祝福</span></span><br><span class="line"><span class="string">愿你有一个灿烂的前程</span></span><br><span class="line"><span class="string">愿你有情人终成眷属</span></span><br><span class="line"><span class="string">愿你在尘世获得幸福</span></span><br><span class="line"><span class="string">我只愿面朝大海，春暖花开</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串的加法和乘法"><a href="#字符串的加法和乘法" class="headerlink" title="字符串的加法和乘法"></a>字符串的加法和乘法</h3><p>使用加法进行拼接：<br><code>&#39;520&#39; + &#39;1314&#39; #输出&#39;5201314&#39;</code><br>使用乘法复制:<br><code>print(&quot;我每天爱你三千遍！ \n&quot; * 3000)</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>2_game代码讲解</title>
    <url>/2022/10/26/Python/2_game%E4%BB%A3%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 用Python设计的第一个游戏 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">&quot;不妨猜一下小甲鱼心里想的是哪个数字：&quot;</span>)</span><br><span class="line">guess = <span class="built_in">int</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你是小甲鱼心里的蛔虫吗？！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;哼，猜中了也没奖励！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜错啦,小甲鱼现在心里想的是8!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩啦&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数input</p>
</blockquote>
<p>input函数可以接受用户输入的内容并返回，参数是一个字符串，运行输会先打印参数里的字符串</p>
<blockquote>
<p>guess &#x3D; int(temp)</p>
</blockquote>
<p> 这里表示强制类型转换,把用户输入的字符串类型变量转换为int整形变量并赋值给guess变量</p>
<blockquote>
<p>if else语句</p>
</blockquote>
<p>if 条件:<br>    如果条件为真(True)则执行这里的语句<br>else:<br>    如果条件为假(False)则执行这里的语句</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>6_列表</title>
    <url>/2022/10/26/Python/6_%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是一种可以存放不同数据类型元素的数据结构<br>格式:<br>[元素0，元素1，……,元素n]<br>列表可以复制给一个变量，可以用变量名加下标访问列表内的元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> li:</span><br><span class="line">    <span class="built_in">print</span>(each)</span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#a</span></span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#输出:1</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#输出:2</span></span><br><span class="line"><span class="built_in">print</span>(li[-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#输出:c</span></span><br></pre></td></tr></table></figure>
<p>注:访问最后一个元素的下标可以使用-1,倒数第二个是-2，,以此类推</p>
<p><strong>列表切片:</strong><br>使用切片语法一次可以访问多个元素<br>用法:<br>从0-3: li[0:3]<br>从3-6: li[3:6]<br>3之前所有: li[:3]<br>3之后所有: li[3:]<br>所有元素: [:]<br>自定义跨度输出: [0:6:2] # 输出1, 3, 5<br>将整个列表倒序输出: li[::-1]</p>
<h3 id="添加列表里的元素"><a href="#添加列表里的元素" class="headerlink" title="添加列表里的元素"></a>添加列表里的元素</h3><p><strong>append方法:</strong><br>功能:在列表末尾增加一个指定的元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">li.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p><strong>entend方法</strong><br>功能:在列表末尾添加一个可迭代对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">li.entend([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<p><strong>使用切片</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">li[<span class="built_in">len</span>(li):] = [<span class="number">6</span>]     </span><br><span class="line"><span class="comment">#等同append</span></span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,4,5,6]</span></span><br><span class="line">li[<span class="built_in">len</span>(li):] = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]    </span><br><span class="line"><span class="comment">#等同extend</span></span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>insert方法</strong><br>功能:在指定位置插入一个元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">li.insert(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment">#第一个参数是待插入元素的位置，第二个参数是待插入元素</span></span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<h3 id="删除列表里的元素"><a href="#删除列表里的元素" class="headerlink" title="删除列表里的元素"></a>删除列表里的元素</h3><p><strong>remave方法</strong><br>功能:删除列表中的指定元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">li.remave(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>注:</p>
<ol>
<li>如果列表里存在相同的元素则remove方法值会优先删除下标最小的元素</li>
<li>如果指定的元素不存在会直接报错</li>
</ol>
<p><strong>pop方法</strong><br>功能:删除指定下标的元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">li.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p><strong>clear方法</strong><br>功能:清空列表内所有元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">li.clear()</span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: []</span></span><br></pre></td></tr></table></figure>

<h3 id="修改列表里的元素"><a href="#修改列表里的元素" class="headerlink" title="修改列表里的元素"></a>修改列表里的元素</h3><p><strong>使用赋值号</strong><br>可以直接使用赋值号修改指定下标的元素，结合切片可修改多个元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">li[<span class="number">1</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出: [1,a,3,4]</span></span><br><span class="line">li[<span class="number">2</span>:] = [b, c]</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出: [1,a,b,c]</span></span><br></pre></td></tr></table></figure>

<p><strong>sort方法和reverse方法</strong><br>功能:自动为列表内的元素从小到大进行排序</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">li.sort()</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出: [1,2,3,4,5]</span></span><br><span class="line">li.reverse()</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出: [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>

<h3 id="查找列表里的元素"><a href="#查找列表里的元素" class="headerlink" title="查找列表里的元素"></a>查找列表里的元素</h3><p><strong>count方法</strong><br>功能:查找列表里有多少个指定元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(li.count(<span class="number">2</span>))    <span class="comment">#输出:2</span></span><br></pre></td></tr></table></figure>
<p><strong>index方法</strong><br>功能:查找某个元素的索引值</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(li.index(<span class="number">4</span>))    <span class="comment">#输出:3</span></span><br><span class="line"><span class="comment"># 在不知道一个元素的索引值的情况下替换这个元素</span></span><br><span class="line">li[li.index(<span class="number">4</span>)] = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(li)    <span class="comment">#输出: [1,2,3,a]</span></span><br></pre></td></tr></table></figure>
<p>注:index会返回第一个找的元素下标值<br><strong>copy方法</strong><br>功能:拷贝列表内的元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">l2 = li.copy()</span><br><span class="line"><span class="built_in">print</span>(l2)    <span class="comment">#输出: [1,2,3,4]</span></span><br><span class="line"><span class="comment"># 使用切片方法实现</span></span><br><span class="line">l3 = li[:]</span><br><span class="line"><span class="built_in">print</span>(l3)    <span class="comment">#输出: [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<h3 id="列表的加法和乘法"><a href="#列表的加法和乘法" class="headerlink" title="列表的加法和乘法"></a>列表的加法和乘法</h3><p><strong>列表的加法</strong><br>列表加法就是合并列表里的元素<br>列表的乘法就是将列表内的元素重复若干次</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">t = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(s + t)    <span class="comment">#输出: [1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">3</span>)    <span class="comment">#输出: [1,2,3,1,2,3,1,2,3]</span></span><br></pre></td></tr></table></figure>

<h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h3><p>嵌套列表就是多维列表<br><strong>创建嵌套列表</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]    <span class="comment">#二维列表(矩阵)</span></span><br><span class="line"><span class="comment">#    或者</span></span><br><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>访问嵌套列表</strong><br>使用嵌套for循环访问嵌套列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix :</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> i :</span><br><span class="line">        <span class="built_in">print</span>(each)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出: 123456789</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix :</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> i :</span><br><span class="line">        <span class="built_in">print</span>(each, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="comment">#1 2 3</span></span><br><span class="line"><span class="comment">#4 5 6</span></span><br><span class="line"><span class="comment">#7 8 9</span></span><br></pre></td></tr></table></figure>
<p>使用下标访问嵌套列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 输出: 5</span></span><br></pre></td></tr></table></figure>

<p><strong>is运算符</strong><br>用于检测两个变量是否指向同一个对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">B = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A)  <span class="comment">#输出:[[0,0,0],[0,0,0],[0,0,0]]</span></span><br><span class="line"><span class="built_in">print</span>(B)  <span class="comment">#输出:[[0,0,0],[0,0,0],[0,0,0]]</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">B[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(A)  <span class="comment">#输出:[[0,0,0],[0,1,0],[0,0,0]]</span></span><br><span class="line"><span class="built_in">print</span>(B)  <span class="comment">#输出:[[0,1,0],[0,1,0],[0,1,0]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用A方法生成的才是真正的二维列表,使用is运算符就可以发现B方法存在的问题</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">0</span>] <span class="keyword">is</span> A[<span class="number">1</span>])  <span class="comment">#输出:Flase</span></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">1</span>] <span class="keyword">is</span> A[<span class="number">2</span>])  <span class="comment">#输出:Flase</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>])  <span class="comment">#输出:True</span></span><br><span class="line"><span class="built_in">print</span>[B[<span class="number">1</span>] <span class="keyword">is</span> B[<span class="number">2</span>]]  <span class="comment">#输出:True</span></span><br></pre></td></tr></table></figure>
<p>示意图:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220919142601.png"></p>
<h3 id="变量和列表的关系"><a href="#变量和列表的关系" class="headerlink" title="变量和列表的关系"></a>变量和列表的关系</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y = x</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)   <span class="comment">#输出: [1,1,3]</span></span><br><span class="line"><span class="built_in">print</span>(y)   <span class="comment">#输出: [1,1,3]</span></span><br></pre></td></tr></table></figure>
<p>示意图:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220919143331.png"></p>
<h3 id="列表的浅拷贝和深拷贝"><a href="#列表的浅拷贝和深拷贝" class="headerlink" title="列表的浅拷贝和深拷贝"></a>列表的浅拷贝和深拷贝</h3><p><strong>浅拷贝处理一维列表:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y = x.copy()</span><br><span class="line"><span class="comment"># y = x[:]      #或者使用切片拷贝</span></span><br><span class="line"><span class="comment">#这里两种拷贝方法都属于浅拷贝</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>] = <span class="number">1</span>   </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment">#输出: [1, 1, 3]</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment">#输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>可以发现使用浅拷贝处理一维列表示没有问题的<br><strong>浅拷贝处理多维列表:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">y = x.copy()</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)   <span class="comment">#输出:[[1,2,3],[4,0,6],[7,8,9]]</span></span><br><span class="line"><span class="built_in">print</span>(y)   <span class="comment">#输出:[[1,2,3],[4,0,6],[7,8,9]]</span></span><br></pre></td></tr></table></figure>
<p>使用浅拷贝在拷贝嵌套列表时出现这种问题<br>示意图:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220919150122.png"><br><strong>深拷贝的使用</strong><br>要使用深拷贝需要先导入copy模块</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment">#输出: [[1,2,3],[4,0,6],[7,8,9]]</span></span><br><span class="line"><span class="built_in">print</span>(y)    <span class="comment">#输出: [[1,2,3],[4,5,6],[7,8,9]]</span></span><br></pre></td></tr></table></figure>
<p>使用deepcopy函数会对对象以及其引用的所有对象进行拷贝</p>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220919151325.png"></p>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式输出对象为一个列表<br>可通过一个可迭代对象很方便地创建一个列表<br><strong>格式1：</strong><br>[表达式 for 变量 in 可迭代对象]</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 使用列表推导式将列表l里的每个元素都乘2</span></span><br><span class="line">li = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> li]</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出: [2,4,6,8]</span></span><br><span class="line"><span class="comment"># 使用列表推导式创建列表</span></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#输出: [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line">li = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#输出: [1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure>
<p>使用列表推导式只需修改表达式就可以快捷修改创建列表内的每个元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#几个列表推导式使用例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对字符串的编辑</span></span><br><span class="line">li = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#输出:[&#x27;HH&#x27;, &#x27;ee&#x27;, &#x27;ll&#x27;, &#x27;ll&#x27;, &#x27;oo&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把字符串每个字符转换为Unicode编码</span></span><br><span class="line">code = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>]    <span class="comment">#内置函数ord()把字符转换成编码</span></span><br><span class="line"><span class="built_in">print</span>(code) <span class="comment">#输出:[72, 101, 108, 108, 111]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获得矩阵第二列的所有元素</span></span><br><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">col2 = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> matrix]</span><br><span class="line"><span class="built_in">print</span>(col2) <span class="comment">#输出:[2, 5, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获得矩阵坐上到右下斜线上的所有元素</span></span><br><span class="line"></span><br><span class="line">diag = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]</span><br><span class="line"><span class="built_in">print</span>(diag) <span class="comment">#输出:[1,5,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>格式2:</strong><br>[表达式1 for 变量 in 可迭代对象 if 表达式2]<br>其中表达式2为筛选条件<br>两个表达式的执行顺序：先表达式1，再表达式2</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">even = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment">#能被2整除</span></span><br><span class="line"><span class="built_in">print</span>(even) <span class="comment">#输出:  0 2 4 6 8</span></span><br></pre></td></tr></table></figure>
<p><strong>格式3:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[表达式<span class="number">1</span> <span class="keyword">for</span> 变量<span class="number">1</span> <span class="keyword">in</span> 可迭代对象<span class="number">1</span></span><br><span class="line">         <span class="keyword">for</span> 变量<span class="number">2</span> <span class="keyword">in</span> 可迭代对象<span class="number">2</span></span><br><span class="line">         <span class="keyword">for</span>.....</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>列表推导式的嵌套，用于展开多维列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"><span class="built_in">print</span>(flatten) <span class="comment">#输出:[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用for循环的格式是这样的</span></span><br><span class="line">flatten = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br><span class="line"><span class="built_in">print</span>(flatten) <span class="comment">#输出:[1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>格式4:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[表达式<span class="number">1</span> <span class="keyword">for</span> 变量<span class="number">1</span> <span class="keyword">in</span> 可迭代对象<span class="number">1</span> <span class="keyword">if</span> 表达式<span class="number">2_1</span></span><br><span class="line">         <span class="keyword">for</span> 变量<span class="number">2</span> <span class="keyword">in</span> 可迭代对象<span class="number">2</span> <span class="keyword">if</span> 表达式<span class="number">2_2</span></span><br><span class="line">         <span class="keyword">for</span>.....</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>列表推导式的终极版本，嵌套的，有筛选条件的列表推导式</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>3_游戏改进</title>
    <url>/2022/10/26/Python/3_%E6%B8%B8%E6%88%8F%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p><strong>改进目标：</strong></p>
<blockquote>
<p>1.当用户才做的时候，程序应该给出提示是大了还是小了<br>2.应该提供多次机会给用户<br>3.每次运行程序，答案应该是随机的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 用Python设计的第一个游戏 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">counts = <span class="number">3</span></span><br><span class="line">answer = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counts &gt; <span class="number">0</span>:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;不妨猜一下小甲鱼心里想的是哪个数字：&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> guess == answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你是小甲鱼心里的蛔虫吗？！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哼，猜中了也没奖励！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> guess &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;小啦&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;大啦&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        counts = counts - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩啦&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>while循环语句:</strong><br>while 条件:<br>    如果条件为真(True)则循环执行这里的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counts = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> counts &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ilovefishc.com&quot;</span>)  <span class="comment">#这里的内容会被执行三次</span></span><br><span class="line">    counts = counts - <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>break语句:</strong><br>格式:<br>break<br>作用:跳出当前的一层循环</p>
<p><strong>使用random模块:</strong><br>import random</p>
<p>random.randint(a,b) 3随机获取一个从a到b之间的整数</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>4_数字类型和运算符</title>
    <url>/2022/10/26/Python/4_%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python的整数是没有长度限制的</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>Python的浮点数存在误差<br>例：<br>0.3 &#x3D;&#x3D; 0.1 + 0.2  #输出:False</p>
<h3 id="如何精确计算浮点数"><a href="#如何精确计算浮点数" class="headerlink" title="如何精确计算浮点数"></a>如何精确计算浮点数</h3><p>使用decimal模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line">a = decimal.Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a + b)              <span class="comment">#输出:0.3</span></span><br><span class="line">c = decimal.Decimal(<span class="string">&#x27;0.3&#x27;</span>)</span><br><span class="line">a + b == c                 <span class="comment">#输出:True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Python中的复数由一个实部和一个虚部组成</p>
<p>x &#x3D; 1 + 2j  #输出(1+2j)<br>x.real   #输出1.0(实部的值)<br>x.imag   #输出2.0(虚部的值)</p>
<h3 id="Python支持的数字运算"><a href="#Python支持的数字运算" class="headerlink" title="Python支持的数字运算:"></a>Python支持的数字运算:</h3><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220916140004.png"><br>地板除:取比目标结果小的最大整数<br>例:<br>3 &#x2F;&#x2F; 2<br>输出: 1<br>-3 &#x2F;&#x2F; 2<br>输出: -21</p>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>定义为Flase的对象: None和Flase<br>值为0的数字类型:0,0.0,0j,Decimal(0),Fraction(0,1)<br>空的序列和集合:’’,(),[],{},set(),range(0)</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220916160324.png"></p>
<p><strong>短路求值逻辑:从左往右，只有当第一个操作数的值无法确定逻辑运算的结果时，才对第二个操作数进行求值。</strong></p>
<p>3 and 4<br>输出:4<br>因为与运算两边同事为真结果才为正，左边的3的布尔值为真，右边的布尔值则为运算结果，所以结果为4(True)<br>3 or 4<br>输出:3<br>因为或运算两边只要有一边为真结果就是真，左边的值(3)为真，则结果就为3(True)<br>例:<br>0 and 3 输出:0<br>0 or 4 输出:4</p>
<p><strong>Python运算符优先级:</strong><br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220916162148.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>5_分支和循环</title>
    <url>/2022/10/26/Python/5_%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h3 id="if-分支语句"><a href="#if-分支语句" class="headerlink" title="if 分支语句:"></a>if 分支语句:</h3><ol>
<li>判断一个条件，如果这个条件成立，就执行其包含的某条语句或某个代码块<br>用法:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">     代码块</span><br></pre></td></tr></table></figure></li>
<li>判断一个条件，就执行其包含的某条语句或某个代码块，如果条件不成立，就执行另外的某条语句或某个代码块 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li>判断多个条件，如果第1个条件不成立，则继续判断第2个条件，若果第2个条件还不成立，则接着判断第3个条件…… <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">    代码块<span class="number">3</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li>在第三种情况下添加一个else,表示上面所有的条件不成立的情况下，执行某条语句或代码块 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">    代码块<span class="number">3</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li>条件表达式:<br>格式:条件成立是执行的语句 if 条件 else 条件不成立时执行的语句<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">small = a <span class="keyword">if</span> a &lt; b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h3><p>只要条件为真，代码块就会被一直循环执行下去</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p><strong>break语句:</strong> 用于跳出死循环<br><strong>continue语句:</strong> 跳出本轮循环</p>
<h3 id="while-else语句"><a href="#while-else语句" class="headerlink" title="while else语句"></a>while else语句</h3><p><strong>当循环条件不再为真的时候，else语句才会被执行</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环内，i的值是&quot;</span>, i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环外,i的值是&quot;</span>, i)</span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment">#   循环内,i的值是 1</span></span><br><span class="line"><span class="comment">#   循环内,i的值是 2</span></span><br></pre></td></tr></table></figure>
<p>因为else语句内的代码在while条件不再为真时才会被执行,当使用break语句退出循环并不会运行else语句内的代码，使用while else语句可以很方便和检测循环语句是否正常退出。<br>应用例:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每日打卡程序</span></span><br><span class="line">day = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> day &lt;= <span class="number">7</span> :</span><br><span class="line">    answer = <span class="built_in">input</span>(<span class="string">&quot;今天又好好学习吗?&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> answer =  <span class="string">&quot;有&quot;</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    day += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非常棒，你已经坚持了7天连续学习!&quot;</span>)</span><br><span class="line">    <span class="comment"># 只有连续7次打卡让循环正常退出，才会显示此处内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>格式:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    语句块</span><br></pre></td></tr></table></figure>
<p>可迭代对象就是指元素可以被单独提取出来的对象，如字符串</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(each)</span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="comment">#h</span></span><br><span class="line"><span class="comment">#e</span></span><br><span class="line"><span class="comment">#l</span></span><br><span class="line"><span class="comment">#l</span></span><br><span class="line"><span class="comment">#o</span></span><br></pre></td></tr></table></figure>
<p>使用while实现:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="range"><a href="#range" class="headerlink" title="range():"></a>range():</h3><p>range可以生成一个数字序列，数字的类型只能是整形。<br>用法:</p>
<ol>
<li>range(stop)<br> 使用这种方法会生成一个从0开始到stop的整数数列</li>
<li>range(start, stop)<br> 使用这种方法可以指定开始到结束的整数序列</li>
<li>range(start, stop, step)<br> 使用这种方法可以指定开始到结束加上跨度的整数序列</li>
</ol>
<p><strong>使用for循环计算求和从0到1 000 000：</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 500000500000</span></span><br></pre></td></tr></table></figure>
<p><strong>使用for循环求2-10之间的素数</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(n,<span class="string">&quot;=&quot;</span>,x,<span class="string">&quot;*&quot;</span>,n//x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n,<span class="string">&quot;是一个素数&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>7_元组</title>
    <url>/2022/10/26/Python/7_%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<h3 id="元组的作用"><a href="#元组的作用" class="headerlink" title="元组的作用"></a>元组的作用</h3><p><strong>元组与列表类似, 可以容纳多重不同数据类型的元素, 不同之处在于元组的元素不能修改</strong><br>格式:<br>(元素1, 元素2, 元素3, ……)<br><strong>元组的使用:</strong><br>因为元组的内容不能修改, 所以在列表的使用中使用的增，删，改，查，在元组这只剩”查”还可以实现</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用count函数查找元组数量</span></span><br><span class="line">nums = (<span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(nums.count())  <span class="comment">#输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用index函数查找元素下标:</span></span><br><span class="line">nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(nums.index(<span class="number">2</span>))  <span class="comment">#输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用切片:</span></span><br><span class="line">rhyme = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;上山打老虎&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rhyme[:<span class="number">3</span>])  <span class="comment">#输出: (1，2，3)</span></span><br><span class="line"><span class="built_in">print</span>(rhyme[:])  <span class="comment">#输出: (1, 2, 3, 4, 5, &#x27;上山打老虎&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(rhyme[::<span class="number">2</span>])  <span class="comment">#输出: (1, 3, 5)</span></span><br><span class="line"><span class="built_in">print</span>(rhyme[::-<span class="number">1</span>])  <span class="comment">#输出: (&#x27;上山打老虎&#x27;, 5, 4, 3, 2, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 + 和 * 运算符:</span></span><br><span class="line">s = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(s + t)  <span class="comment">#输出: (1, 2, 3, 4, 5, 6)</span></span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">3</span>)  <span class="comment">#输出: (1,2,3,1,2,3,1,2,3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组的嵌套:</span></span><br><span class="line">s = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">w = s, t</span><br><span class="line"><span class="built_in">print</span>(w)  <span class="comment">#输出:((1, 2, 3),(4, 5, 6))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(each)</span><br><span class="line"><span class="comment">#输出:1 2 3 4 5 6 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用元组生成列表(使用列表生成式):</span></span><br><span class="line">s = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>([each * <span class="number">2</span> <span class="keyword">for</span> each <span class="keyword">in</span> s])  <span class="comment">#输出: [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成一个只有一个元素的元组:</span></span><br><span class="line">x = (<span class="number">520</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment">#输出:&lt;class &#x27;tuple&#x27;&gt;   #tuple:元组</span></span><br></pre></td></tr></table></figure>
<p><strong>元组的打包和解包:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#元组的打包:</span></span><br><span class="line">t = (<span class="number">123</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(t)  <span class="comment">#输出: (123, &#x27;Hello&#x27;, 3.14)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组的解包:</span></span><br><span class="line">x, y, z = t</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment">#输出:123</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment">#输出:&#x27;Hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment">#输出:3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注:   1.赋值号左边的变量数量必须和元素数量保持一致</span></span><br><span class="line"><span class="comment">#      2.列表和字符串也同样可以同样实现这样的操作</span></span><br></pre></td></tr></table></figure>

<p><strong>如何实现内容可以修改的元组:</strong><br>在元组里嵌套列表的元素就可以实现修改和删除，虽然元组内的元素的不可变的，但如果元素内的元素指向的是一个可以修改的列表，那么我们依然可以修改列表中的元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">w = (s, t)</span><br><span class="line"><span class="built_in">print</span>(w)  <span class="comment">#输出: ([1, 2, 3], [4, 5, 6])</span></span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(w)  <span class="comment">#输出: ([0, 2, 3], [4, 5, 6])</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>8_字符串</title>
    <url>/2022/10/26/Python/8_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="字符串的序列特性"><a href="#字符串的序列特性" class="headerlink" title="字符串的序列特性"></a>字符串的序列特性</h2><ul>
<li><strong>用字符串的序列特性来判断一个字符串是不是回文数：</strong><blockquote>
<p>注:回文数就是指正序访问与倒序访问结果都一样的字符串</p>
</blockquote>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;12321&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是回文数&quot;</span> <span class="keyword">if</span> x == x[::-<span class="number">1</span>] <span class="keyword">else</span> <span class="string">&quot;不是回文数&quot;</span> )</span><br><span class="line"><span class="comment">#输出: &quot;是回文数&quot;</span></span><br><span class="line">y = <span class="string">&quot;12345&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是回文数&quot;</span> <span class="keyword">if</span> x == x[::-<span class="number">1</span>] <span class="keyword">else</span> <span class="string">&quot;不是回文数&quot;</span> )</span><br><span class="line"><span class="comment">#输出: &quot;不是回文数&quot;</span></span><br></pre></td></tr></table></figure>
<p>字符串与元组类似都是一个常量序列，也可以用切片方法访问，代码展示了使用切片方法方便的判断一个字符串是不是属于回文数</p>
<h2 id="字符串对象的内嵌方法"><a href="#字符串对象的内嵌方法" class="headerlink" title="字符串对象的内嵌方法"></a>字符串对象的内嵌方法</h2><ul>
<li><strong>大小写转换:</strong><blockquote>
<p>capitalize() &amp;emsp; casefold() &amp;emsp; title()<br>swapcase() &amp;emsp; upper() &amp;emsp; lower()</p>
</blockquote>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">x = <span class="string">&quot;Hello,World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capitalize()将字符串的一个字母转换为大写，其余字母转换为小写</span></span><br><span class="line"><span class="built_in">print</span>(x.capitalize())</span><br><span class="line"><span class="comment"># 输出: &quot;Hello,world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># casefold()将字符串全部转换为小写字母</span></span><br><span class="line"><span class="built_in">print</span>(x.casefold())</span><br><span class="line"><span class="comment"># 输出: &quot;hello,world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># title()将字符串的每个单词第一个字母转换为大写，其余字母转换为小写</span></span><br><span class="line"><span class="built_in">print</span>(x.title())</span><br><span class="line"><span class="comment"># 输出: &quot;Hello,World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swapcase()将所有字母大小写翻转</span></span><br><span class="line"><span class="built_in">print</span>(x.swapcase())</span><br><span class="line"><span class="comment"># 输出: &quot;hELLO,wORLD!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># upper()将所有字母变成大写</span></span><br><span class="line"><span class="built_in">print</span>(x.upper())</span><br><span class="line"><span class="comment"># 输出: &quot;HELLO,WORLD!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower()将所有字母变成小写</span></span><br><span class="line"><span class="built_in">print</span>(x.lower())</span><br><span class="line"><span class="comment"># 输出: &quot;hello,world!&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>casefold()方法和lower()方法的区别：<br>lower()只能处理英文字符而casefold()还可以转换其他语言的大小写字母</p>
</blockquote>
<ul>
<li><strong>左中右对其:</strong><blockquote>
<p>center(width, fillchar&#x3D;’’) &amp;emsp; ljust(width, fillchar&#x3D;’’)<br>rjust(width, fillchar&#x3D;’’) &amp;emsp; zfill(width)</p>
</blockquote>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;12345&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.center(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出: &quot;12345&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.center(<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 输出: &quot;     12345     &quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.ljust(<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 输出: &quot;12345          &quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.rjust(<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 输出: &quot;          12345&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.zfill(<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 输出: &quot;000000000012345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fillchar参数:对齐时填充的字符，默认为空格，可以指定字符填充</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.center(<span class="number">15</span>), <span class="string">&quot;f&quot;</span>)</span><br><span class="line"><span class="comment"># 输出: &quot;fffff12345fffff&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查找:</strong></li>
</ul>
<blockquote>
<p>count(sub[, start[, end]])<br>find(sub[, start[, end]]) &amp;emsp; rfind(sub[, start[, end]])<br>index(sub[, start[, end]]) &amp;emsp; rindex(sub[, start[, end]])</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;上海自来水来自海上&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count()指定元素在字符串里出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(x.count(<span class="string">&quot;海&quot;</span>))</span><br><span class="line"><span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数: 指定起始位置(下标)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.count(<span class="string">&quot;海&quot;</span>, <span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find()指定元素在字符串里的下标(从左到右第一个)</span></span><br><span class="line"><span class="built_in">print</span>(x.find(<span class="string">&quot;海&quot;</span>))</span><br><span class="line"><span class="comment"># 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rfind()指定元素在字符串里的下标(从右到左第一个)</span></span><br><span class="line"><span class="built_in">print</span>(x.rfind(<span class="string">&quot;海&quot;</span>))</span><br><span class="line"><span class="comment"># 输出: 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find()方法或rfind()方法找不指定元素时 默认返回-1,而index()方法找不到指定元素时会抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.find(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"><span class="comment"># 输出: -1</span></span><br><span class="line"><span class="built_in">print</span>(x.index(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"><span class="comment"># 输出: ValueError: substring not found</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>替换:</strong></li>
</ul>
<blockquote>
<p>expandtabs([tabsize&#x3D;8]) &amp;emsp; replace(old, new ,count&#x3D;-1)<br>translate(table)</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>P2_创建多维数组</title>
    <url>/2023/05/10/NumPy/P2_%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="多维数组介绍"><a href="#多维数组介绍" class="headerlink" title="多维数组介绍"></a>多维数组介绍</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = np.array(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure>
<ul>
<li>使用array方法创建的ab两个数组，其中a为一行六列的<strong>一维数组</strong>，b为两行三列的<strong>二维数组</strong>。</li>
<li>多维数组就是数组的嵌套，是以数组为元素的数组。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.ones((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">b = np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">c = np.full((<span class="number">3</span>,<span class="number">3</span>), <span class="number">520</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[[<span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]</span><br><span class="line"> [<span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]</span><br><span class="line"> [<span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]]</span><br></pre></td></tr></table></figure></li>
<li>使用函数的shape参数传入一个定义行列数的元组创建二维数组。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.shape)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.dnim)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>创建一个2,3,3的<strong>三维数组</strong>其由两块二维数组组成。</li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P3_改变数组形状</title>
    <url>/2023/05/12/NumPy/P3_%E6%94%B9%E5%8F%98%E6%95%B0%E7%BB%84%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<h3 id="reshape不改变值改形状"><a href="#reshape不改变值改形状" class="headerlink" title="reshape不改变值改形状"></a>reshape不改变值改形状</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)   <span class="comment">#变为2行5列</span></span><br><span class="line">b = a.reshape(<span class="number">10</span>)                 <span class="comment">#变回1行1列</span></span><br><span class="line">c =  f.flatten()</span><br></pre></td></tr></table></figure>
<h3 id="创建形状相同的数组"><a href="#创建形状相同的数组" class="headerlink" title="创建形状相同的数组"></a>创建形状相同的数组</h3><ul>
<li>形状相同，内容全为1:<code>np.ones_like()</code></li>
<li>形状相同，内容全为0:<code>np.zeros_like()</code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">b = np.ones_like(a)</span><br><span class="line">c = np.zeros_like(a)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P1_创建数组</title>
    <url>/2023/05/10/NumPy/P1_%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="NumPy创建数组"><a href="#NumPy创建数组" class="headerlink" title="NumPy创建数组"></a>NumPy创建数组</h2><h3 id="array与arange方法"><a href="#array与arange方法" class="headerlink" title="array与arange方法:"></a>array与arange方法:</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], dtype = <span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">b = np.array(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>), dtype = <span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">c = np.arange(<span class="number">1</span>, <span class="number">6</span>, dtype = <span class="string">&#x27;int32&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>np.array方法：将一个序列转换为numpy数组类型。<br>  <code>np.array(序列, detype = None)</code></li>
<li>np.arange方法：numpy版range,直接生成一个numpy格式组。<br>  <code>np.arange([开始,]结束,[步长,] detype = None)</code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;numpy.ndarray&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.dtype</span><br><span class="line">dtype(<span class="string">&#x27;int32&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>使用numpy方法生成的数组的类型为numpy特有的数组类型(ndarray)。</li>
<li>创建的数组可以使用<code>.dtype</code>参数查询数组成员的数据类型。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape</span><br><span class="line">(<span class="number">5</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.ndim</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.size</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.dtype</span><br><span class="line">dtype(<span class="string">&#x27;int32&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>array的属性：<ul>
<li>shape：返回一个元组，表示array的维度[形状, 几行几列]。</li>
<li>nidm：返回一个数字，表示array的维度数目。</li>
<li>size：返回一个数字，表示array中所有数据元素的数目。</li>
<li>dtype：返回array中元素的数据类型。</li>
</ul>
</li>
</ul>
<h3 id="使用ones创建全是1的数组："><a href="#使用ones创建全是1的数组：" class="headerlink" title="使用ones创建全是1的数组："></a>使用ones创建全是1的数组：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">3</span>)</span><br><span class="line">b = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">c = np.ones((<span class="number">5</span>,), dtype = np.<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>np.ones方法: 创建一个全是1的数组<br>  <code>np.ones(shape, dtype=None, order=&#39;C&#39;)</code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li>
<li>ones方法的参数:<ul>
<li>shape: 整数或者整形元组定义返回数据的形状；可以使一个数（创建一维向量），也可以是一个元组（创建多维向量）</li>
<li>dtype: 数据类型，可选定义返回数组的类型。</li>
<li>order: {‘C’, ‘F’},可选规定返回数组元素在内存的存储顺序: C（C语言）-rowmajor; F(Fortran) column-major.</li>
</ul>
</li>
</ul>
<h3 id="创建全是0的数组"><a href="#创建全是0的数组" class="headerlink" title="创建全是0的数组"></a>创建全是0的数组</h3><ul>
<li>只需要将方法名换成<code>zeros</code>，使用方法与参数同上。</li>
</ul>
<h3 id="使用full创建指定值的数组"><a href="#使用full创建指定值的数组" class="headerlink" title="使用full创建指定值的数组"></a>使用full创建指定值的数组</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.full(<span class="number">3</span>, <span class="number">520</span>)</span><br><span class="line">b = np.full((<span class="number">2</span>, <span class="number">4</span>), <span class="number">520</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>full方法: 使用指定的值按格式填充数组。<br>  <code>np.full(shape, fill_value, dtype=None, order=&#39;C&#39;)</code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">520</span> <span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]</span><br><span class="line"> [<span class="number">520</span> <span class="number">520</span> <span class="number">520</span> <span class="number">520</span>]]</span><br></pre></td></tr></table></figure></li>
<li>full方法的参数：<ul>
<li>shape: 整数或者整形元组定义返回数组的形状；可以是一个数（创建一维向量），也可以是一个元组（创建多维向量）</li>
<li>fill_value: 标量（就是纯数值变量）</li>
<li>dtype: 数据类型，可选定义返回数组的类型。</li>
<li>order:{‘C’, ‘F’},可选规定返回数组元素在内存的存储顺序：C(C语言) -rowmajor; F(Fortran) column-major.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P4_数组的计算与广播机制</title>
    <url>/2023/05/14/NumPy/P4_%E6%95%B0%E7%BB%84%E7%9A%84%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h2><ul>
<li>数组与数字的计算：数组内元素依次与该数字进行计算<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&gt;&gt;&gt;a+<span class="number">1</span></span><br><span class="line">array([[<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">       [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span><br></pre></td></tr></table></figure></li>
<li>数组与数组的计算:<ul>
<li>当两个数组形状(shape)参数相等时：数组内对应位置元素一一对应计算。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line">array([[<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure></li>
<li>当两个数组形状(shape)参数不相等时：只有两个数组在某一维度上拥有相同的轴长，则任可计算。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">c = np.ones((<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line">array([[<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">     [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+c</span><br><span class="line">array([[<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">     [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>广播机制:<ul>
<li>当形状不同的数组在计算会触发广播机制，广播就是对数组维度的扩展。下面是广播的规则：<br>1. 当参与计算的两个数组维度不同时，广播会先在缺少维度的数组上补1，直到两个数组的维度相等。<br>     *  如:计算<code>np.ones((3,))+np.ones((3,2))</code>时，广播会 先将前一数组的shape改为(3,1)然后再进行后续计算。<br>2. 两个数组在经过或没经过第一步操作后，两个数组的维度值相等，此时若其中一个数组的某一维度为1，广播机制会自动扩展这个维度，使其与另一数组shape完全一致后进行计算。<br>      * <img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230515212419.png"><br>      * <img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230515212941.png"><br>3. 两个数组要是没有一个数组的维度为1无法进行第2步操作，则无法完成广播并抛出一个<code>ValueError</code>。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P7_NumPy常用随机数</title>
    <url>/2023/05/21/NumPy/P7_NumPy%E5%B8%B8%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<h3 id="seed向随机数生成器传传递随机状态种子："><a href="#seed向随机数生成器传传递随机状态种子：" class="headerlink" title="seed向随机数生成器传传递随机状态种子："></a>seed向随机数生成器传传递随机状态种子：</h3><ul>
<li>只要random.seed(*)seed里面的值一样，那随机出来的结果就一样。所以说，seed的作用就是让随机结果可以重现。也就是说当我们设置相同的seed，每次生成的随机数相同。如果不设置seed，则每次会生成不同的随机数。使用同一个种子，每次生成的随机数序列都是相同的。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="randint-随机整数"><a href="#randint-随机整数" class="headerlink" title="randint 随机整数:"></a>randint 随机整数:</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.randint(<span class="number">3</span>)  <span class="comment"># 在0到3之间生成一个随机整数</span></span><br><span class="line">b = np.random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment"># 在1到10之间生成一个随机整数</span></span><br><span class="line">c = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,size=(<span class="number">5</span>,)) <span class="comment"># 在1到10之间生成5列的随机一维数组</span></span><br><span class="line">d = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment"># 在1到10之间生成3行5列的随机二维数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[<span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">9</span> <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d)</span><br><span class="line">[[<span class="number">9</span> <span class="number">9</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">5</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">8</span> <span class="number">8</span> <span class="number">1</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="random-生成0-0至1-0之间的随机小数："><a href="#random-生成0-0至1-0之间的随机小数：" class="headerlink" title="random 生成0.0至1.0之间的随机小数："></a>random 生成0.0至1.0之间的随机小数：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(<span class="number">3</span>) <span class="comment"># 生成3个0至1之间的随机小数</span></span><br><span class="line">b = np.random.random(size=(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 生成2行3列0至1之间的随机小数二维数组</span></span><br><span class="line">c = np.random.random(size=(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 生成3块2行2列0至1之间的随机小数二维数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">0.25813906</span> <span class="number">0.82466797</span> <span class="number">0.72042472</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">0.53770224</span> <span class="number">0.27216829</span> <span class="number">0.52956564</span>]</span><br><span class="line"> [<span class="number">0.85333164</span> <span class="number">0.46672623</span> <span class="number">0.96336447</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[[[<span class="number">0.96124204</span> <span class="number">0.62181928</span>]</span><br><span class="line">  [<span class="number">0.46219458</span> <span class="number">0.8472617</span> ]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.40510907</span> <span class="number">0.43173369</span>]</span><br><span class="line">  [<span class="number">0.48500043</span> <span class="number">0.40644189</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.20826501</span> <span class="number">0.11260162</span>]</span><br><span class="line">  [<span class="number">0.80804678</span> <span class="number">0.46113368</span>]]]</span><br></pre></td></tr></table></figure>
<h3 id="choice-从一维数组中生成随机数："><a href="#choice-从一维数组中生成随机数：" class="headerlink" title="choice 从一维数组中生成随机数："></a>choice 从一维数组中生成随机数：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个三参数是一个一维数组，如果只有一个数的话，相当于range(这个数)</span></span><br><span class="line"><span class="string">第二个参数是需要生成数组的shape，如果只有一个数就会生成一维数组，这个数就是一维数组的元素个数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = np.random.choice(<span class="number">5</span>,<span class="number">3</span>) <span class="comment"># 从range(5)中随机生成3列的一维数组</span></span><br><span class="line">b = np.random.choice(<span class="number">5</span>,(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 从range(5)中随机生成2行3列的二维数组</span></span><br><span class="line">c = np.random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>],<span class="number">3</span>) <span class="comment"># 从[1,2,9,4,8,6,7,9]中随机生成3列的一维数组</span></span><br><span class="line">d = np.random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>],(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 从[1,2,9,4,8,6,7,9]中随机生成2行3列的二维数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">3</span> <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[<span class="number">7</span> <span class="number">9</span> <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d)</span><br><span class="line">[[<span class="number">1</span> <span class="number">4</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">4</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="shuffle-把一个数组进行随机排列："><a href="#shuffle-把一个数组进行随机排列：" class="headerlink" title="shuffle 把一个数组进行随机排列："></a>shuffle 把一个数组进行随机排列：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>) </span><br><span class="line">np.random.shuffle(a)</span><br><span class="line">b = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">np.random.shuffle(b)</span><br><span class="line">c = np.arange(<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">np.random.shuffle(c[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">9</span> <span class="number">3</span> <span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">7</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多维数组只是按行随机，列不变</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line">  [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"> [[ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line">  [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]]</span><br></pre></td></tr></table></figure>
<h3 id="permutation-把一个数组随机排列或者数字全排列："><a href="#permutation-把一个数组随机排列或者数字全排列：" class="headerlink" title="permutation 把一个数组随机排列或者数字全排列："></a>permutation 把一个数组随机排列或者数字全排列：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">与np.random.shuffle()效果一样，但是是返回新数组作为结果，而不改变原本的数组</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = np.random.permutation(<span class="number">10</span>) <span class="comment"># 此处效果与shuffle一样</span></span><br><span class="line">b = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">c = np.random.permutation(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)[<span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">8</span> <span class="number">2</span> <span class="number">5</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">[[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)  <span class="comment"># 再次检查b数组，发现数组的并没有改变</span></span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="normal-生成正态分布数字："><a href="#normal-生成正态分布数字：" class="headerlink" title="normal 生成正态分布数字："></a>normal 生成正态分布数字：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">正态分布，又叫常态分布，又叫高斯分布</span></span><br><span class="line"><span class="string">normal [平均值，方差，size]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.normal(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment"># 平均值1，方差10，10个数</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[ -<span class="number">4.80972345</span>   <span class="number">3.21754202</span> -<span class="number">13.62124253</span>  -<span class="number">1.81390496</span>  -<span class="number">7.0960738</span></span><br><span class="line">  <span class="number">15.51276455</span> -<span class="number">12.6628616</span>    <span class="number">5.33833257</span>   <span class="number">5.26607505</span>  -<span class="number">1.06609945</span>]</span><br></pre></td></tr></table></figure>
<h3 id="uniform-均匀分布："><a href="#uniform-均匀分布：" class="headerlink" title="uniform 均匀分布："></a>uniform 均匀分布：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.uniform(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment"># 在1到10之间生成10个随机数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">2.27906803</span> <span class="number">5.56558209</span> <span class="number">9.8278692</span>  <span class="number">5.00394756</span> <span class="number">6.07593014</span> <span class="number">6.34886202</span></span><br><span class="line"> <span class="number">2.01584024</span> <span class="number">1.84062662</span> <span class="number">9.66152769</span> <span class="number">2.93471345</span>]</span><br><span class="line"></span><br><span class="line">b = np.random.uniform(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 在1到10之间生成2行3列共计6个随机数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">5.53857595</span> <span class="number">2.80363056</span> <span class="number">4.01241531</span>]</span><br><span class="line"> [<span class="number">2.9359578</span>  <span class="number">1.56351089</span> <span class="number">6.47146616</span>]]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P6_轴，沿轴切片与轴转置</title>
    <url>/2023/05/18/NumPy/P6_%E8%BD%B4%EF%BC%8C%E6%B2%BF%E8%BD%B4%E5%88%87%E7%89%87%E4%B8%8E%E8%BD%B4%E8%BD%AC%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="数组的轴"><a href="#数组的轴" class="headerlink" title="数组的轴"></a>数组的轴</h2><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230518194840.png"></p>
<ul>
<li>轴是多维数组中描述数组索引顺序的参数，数组有几维就有几个轴。</li>
<li>轴的值从0开始，如三维数组拥有0,1,2三个轴。</li>
<li>无论是几维数组，0维数组都代表对高维度索引顺序的轴，如在三维数组中0轴是“块”的索引，在二维数组中0轴是“行”的索引。</li>
<li>多维数组的shape参数就是以不同维度在轴上的值表示的，假设一个三维数组的shape为(4,3,2),其中三个值分别代表(0轴,1轴,2轴),所以这是一个四块，三行，两列的三维数组。<blockquote>
<p>凡是提到轴，先看数组维度，有几个为就有几个轴。</p>
</blockquote>
</li>
</ul>
<h2 id="沿轴切片"><a href="#沿轴切片" class="headerlink" title="沿轴切片"></a>沿轴切片</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.shape)</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>该数组的维度为(3,3),拥有0轴与1轴两个轴<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[:<span class="number">2</span>])</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></li>
<li>在上面切片操作中，:2是切片的第一个参数，第一个参数代表0轴，而0轴表示的是2维，所以这个切片实在2维这个维度上切的，又叫“沿0轴切片”<br>  <img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230518213728.png"><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[:<span class="number">2</span>,<span class="number">1</span>:])</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></li>
<li>在两个维度（轴）上各切一刀，第一个参数就是2维（0轴）上的索引[0]和索引[1]，既([1,2,3])和([4,5,6])这两个1维数组第2个参数就是1维（1轴），1:表示切取1维（1轴）上的索引[1]和索引[2]，既对数组([1,2,3])取([2,3])，对数组([4,5,6])取([5,6])<br>  <img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230518214423.png"></li>
</ul>
<h2 id="数组转置"><a href="#数组转置" class="headerlink" title="数组转置"></a>数组转置</h2><ul>
<li>使用transpose方法【行列转置】:<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.transpose())</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">6</span> <span class="number">12</span> <span class="number">18</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">7</span> <span class="number">13</span> <span class="number">19</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">8</span> <span class="number">14</span> <span class="number">20</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">9</span> <span class="number">15</span> <span class="number">21</span>]</span><br><span class="line"> [ <span class="number">4</span> <span class="number">10</span> <span class="number">16</span> <span class="number">22</span>]</span><br><span class="line"> [ <span class="number">5</span> <span class="number">11</span> <span class="number">17</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure></li>
<li>直接使用transpose方法，将原二维数组的每一行都换成了列，每一列都转成了行，也称为轴转置.</li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P8_数学和统计方法</title>
    <url>/2023/05/24/NumPy/P8_%E6%95%B0%E5%AD%A6%E5%92%8C%E7%BB%9F%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P5_数组索引</title>
    <url>/2023/05/17/NumPy/P5_%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="基础索引"><a href="#基础索引" class="headerlink" title="基础索引"></a>基础索引</h2><ul>
<li>下标索引和切片：numpy数组基础索引方式与python一致支持下标与切片索引.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">A = np.array([[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>],</span><br><span class="line">			  [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">3</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(A[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">[[<span class="number">9</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">5</span>]]</span><br></pre></td></tr></table></figure></li>
<li>布尔索引：通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取大于5的元素</span></span><br><span class="line">a = np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[a&gt;<span class="number">5</span>])</span><br><span class="line">[ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"><span class="comment"># 过滤nan</span></span><br><span class="line">a = np.array([np.nan,  <span class="number">1</span>,<span class="number">2</span>,np.nan,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[~np.isnan(a)])</span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>NumPy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>P100IO流_字节缓冲流</title>
    <url>/2023/05/24/JavaSE/P100IO%E6%B5%81_%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81/</url>
    <content><![CDATA[<h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><ul>
<li><strong>缓冲流: BufferedInputStream&#x2F;BufferedOutputStream</strong><ul>
<li>提高IO效率，减少访问磁盘的次数：</li>
<li>数据存储在缓冲区中，flush是将缓存区的内容写入文件中，也可以直接close<br/></li>
</ul>
</li>
</ul>
<h3 id="字节缓冲输入流BufferedInputStream"><a href="#字节缓冲输入流BufferedInputStream" class="headerlink" title="字节缓冲输入流BufferedInputStream:"></a>字节缓冲输入流BufferedInputStream:</h3><ul>
<li><strong>初始化：初始化参数需要传入一个底层节点流(fis就属于一种底层节点流)：</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br></pre></td></tr></table></figure></li>
<li><strong>字节缓冲流支持使用内置缓冲区和使用自定义的缓冲区：</strong><ul>
<li>使用内置的缓冲区:  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>((data=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">       System.out.print((<span class="type">char</span>)data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>使用自定义的缓冲区  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> ((count = bis.read(buf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,count));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<strong>使用bis读取文件示例：</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//从字节缓冲流中读取</span></span><br><span class="line">        <span class="comment">//1创建字节缓冲流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo5\\aaa.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1读取(使用内置缓冲区)</span></span><br><span class="line">        <span class="type">int</span> data=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((data=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2读取(使用自定义缓冲区)</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((count = bis.read(buf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,count));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="字节缓冲输出流BufferedOutputStream"><a href="#字节缓冲输出流BufferedOutputStream" class="headerlink" title="字节缓冲输出流BufferedOutputStream:"></a>字节缓冲输出流BufferedOutputStream:</h3><ul>
<li><strong>初始化：初始化参数与输字节缓冲入流类似，需要传入一个输入流对象：</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputSttream</span>(<span class="string">&quot;输出文件路径&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br></pre></td></tr></table></figure></li>
<li><strong>flush()方法：</strong><br>字节缓冲流调用write()方法时输出是先写入到缓冲区，当调用flush()方法时，才会将缓冲区内的数据写入硬盘；该方法在执行close()关闭流的时候也会自动执行。<br/></li>
</ul>
<p><strong>使用bos写入文件示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1创建字节输出缓冲流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo5,6\\bbb.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2写入文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//写入一次数据刷新一次(防止数据丢失)</span></span><br><span class="line">            bos.write(<span class="string">&quot;helloworld\r\n&quot;</span>.getBytes());   <span class="comment">//写入内置缓冲区</span></span><br><span class="line">            bos.flush();   <span class="comment">//刷新到硬盘</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        bos.close();   <span class="comment">//执行此方法时也会内部调用一次flush()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P101IO流_对象流</title>
    <url>/2023/05/25/JavaSE/P101IO%E6%B5%81_%E5%AF%B9%E8%B1%A1%E6%B5%81/</url>
    <content><![CDATA[<h2 id="对象流-ObjectOutputStream-x2F-ObjectInputStream"><a href="#对象流-ObjectOutputStream-x2F-ObjectInputStream" class="headerlink" title="对象流: ObjectOutputStream&#x2F;ObjectInputStream"></a>对象流: ObjectOutputStream&#x2F;ObjectInputStream</h2><ul>
<li>对象流就是可以将对象写入文件或从文件中读取数据再重建成对象的流.</li>
<li><strong>对象流特点:</strong><ul>
<li>增强了缓冲区功能.</li>
<li>增强了读写8中基本数据类型和字符串功能.</li>
<li><strong>增强了读写对象的功能：</strong><ul>
<li><code>readObject()</code>从流中读取一个对象.</li>
<li><code>writeObject(Object obj)</code>向流中写入一个对象.<blockquote>
<p>使用流传输对象的过程称为序列化、反序列化.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul>
<li>将对象通过对象流写入文件的过程称为序列化.</li>
<li><strong>被序列化的对象必须实现<code>Serializable</code>接口.</strong><ul>
<li><code>Serializable</code>接口是一个标记接口,不含有任何属性和方法，仅作标记改类可被序列化.<br/></li>
</ul>
</li>
</ul>
<p>序列化示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1创建对象流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo7\\stu.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2序列化(写入操作)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        oos.writeObject(zhangsan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><ul>
<li>从文件中读取数据并重建对象的过程称为序列化.</li>
</ul>
<p>序列化示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1创建对象输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo7\\stu.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2反序列化</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)ois.readObject();</span><br><span class="line">        System.out.println(s.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注：使用ois读取文件时同一个文件只能读取一次，若重复读取则会报<code>java.io.EOFException</code>异常.<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230529185835.png"></li>
</ul>
<h3 id="对象流注意事项"><a href="#对象流注意事项" class="headerlink" title="对象流注意事项"></a>对象流注意事项</h3><ol>
<li><p>序列化类必须要实现Serializable接口.</p>
</li>
<li><p>序列化类中对象属性（引用类型属性）要求实现Serializable接口.</p>
</li>
<li><p>实现Serializable接口的类理论是需要声明一个<code>serialVersionUID</code>属性:</p>
<ul>
<li><pre><code class="java">public class Student implements Serializable &#123;
    private static final long serialVersionUID = 100L;
    private String name;
    private int age;
    ......
&#125;
</code></pre>
</li>
<li><code>serialVersionUID</code>：序列化版本号ID,保证序列化的类和反序列化的类是同一个类.<br/></li>
</ul>
</li>
<li><p>含有<code>transient</code>关键字修饰的类不能被序列化.</p>
<blockquote>
<p><code>transient</code>：瞬间的，使用该修饰符定义的属性止咳存在于内存之中.</p>
</blockquote>
</li>
<li><p>含有静态（static）属性的类也不能序列化.</p>
</li>
<li><p>序列化多个对象，可以借助集合实现.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P11流程控制_用户交互Scanner</title>
    <url>/2022/10/26/JavaSE/P11%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92Scanner/</url>
    <content><![CDATA[<h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><ul>
<li>之前我们学的基本语法中我们没有实现程序和人的交互，但是Java给我们提供了这样一个工具类，我们可以获取用户的输入。java.util.Scanner是Java5的新特性，<strong>我们可以通过Scanner类来获取用户的输入。</strong></li>
</ul>
<br>

<ul>
<li><p>基本语法<br><code>Scanner s = new Scanner(System.in);</code></p>
<br>
</li>
<li><p><strong>通过Scanner类的 next( )与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用 hasNext() 与 hasNextLine() 判断是否还有输入的数据。</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用来接收键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())&#123;</span><br><span class="line">            <span class="comment">//接收用户的输入</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关掉</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220831045632.png"><br>输入的是 hello world 而输出却只有 hello ，空格后的内容没有被正常接收</p>
<p><strong>注:这里用的hasNext()方法并不能正确接收含有空格的字符串</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220831050818.png"><br>使用nextLine方法接收就可以正确接收带有空格的内容，可以看出此处nextLine方法检测的标志为回车键(即’\n’转义字符)</p>
<h3 id="next-与-nextLine-的区别："><a href="#next-与-nextLine-的区别：" class="headerlink" title="next() 与 nextLine()的区别："></a>next() 与 nextLine()的区别：</h3><ul>
<li>next():<ul>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
<li><strong>结论：next()不能的到带有空格的字符串</strong></li>
</ul>
</li>
<li>nextLine():<ul>
<li>以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>可以获得空白。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P10基础_JavaDoc</title>
    <url>/2022/10/26/JavaSE/P10%E5%9F%BA%E7%A1%80_JavaDoc/</url>
    <content><![CDATA[<h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><ul>
<li>javadoc命令是用来生成自己API文档的</li>
<li>参数信息：<ul>
<li>@author 作者名</li>
<li>@version 版本号</li>
<li>@since 指明需要最早使用的jdk版本</li>
<li>@param 参数名</li>
<li>@return 返回值情况</li>
<li>@throws 异常抛出情况</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P12流程控制_Scanner进阶使用</title>
    <url>/2022/10/26/JavaSE/P12%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_Scanner%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Scanner对象进阶使用方法"><a href="#Scanner对象进阶使用方法" class="headerlink" title="Scanner对象进阶使用方法"></a>Scanner对象进阶使用方法</h2><ul>
<li>除了使用基础的Next和NextLine方法接收字符串数据，Scanner对象还能够接收指定数据类型的数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用nextInt方法接收指定整形数据</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的整数是&quot;</span>+i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用nextFloat方法接收指定浮点型数据</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的小数是:&quot;</span>+f);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是小数！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正确输入的情况:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221008004637.png"><br>输入数据类型符合，程序正确输出了输入的数据</p>
<p>输入数据不符合的情况:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221008004836.png"><br>程序判断10.1不是整数则输出else分支中设定好的提示</p>
<ul>
<li><strong>例题:可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入，并输出结果</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义计算总和sum变量</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义输入数字的个数m变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过while循环语句判断还有没有数字输入,并在循环内完成运算</span></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextFloat();</span><br><span class="line">            m++;</span><br><span class="line">            sum+=x;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入了第&quot;</span>+m+<span class="string">&quot;个数据，当前结果sum=&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的和为&quot;</span> + sum);</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的平均数为&quot;</span> + (sum/m));</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序正常运行<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221008013808.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P13流程控制_顺序结构</title>
    <url>/2022/10/26/JavaSE/P13%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul>
<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</li>
<li>语句与语句之间是由从上到下的顺序进行的，它是由若干个一次执行的处理步骤组成的，<strong>它是任何一个算法都离不开的一种基本算法结构</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShunXuDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello4&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221010203319.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P15流程控制_Switch选择结构</title>
    <url>/2022/10/26/JavaSE/P15%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_Switch%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch case语句"></a>switch case语句</h2><ul>
<li>实现多选择结构的一种语句switch case。</li>
<li>switch case语句判断一个变量与一系列值中某个值是否相等,每个值称为一个分支。</li>
<li>语法:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span> :</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span> :</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//case的数量可以是任意的</span></span><br><span class="line">    <span class="keyword">default</span> :  <span class="comment">//可选</span></span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>语句会自动从上往下匹配与表达式值相等的 case 语句并执行,若所有  case 语句的值都不匹配则默认执行default语句中的代码。</li>
<li>switch 语句中的变量类型可以是:<ul>
<li>byte, short, int 或者 char。</li>
<li>从Java SE7 开始。</li>
<li>switch 支持字符串(String)类型。</li>
<li>同时 case 标签必须为字符串常量或者字面量。<br>例子:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong>写完每个case后按需要添加break语句，否则语句会接着执行后面的所有case。这种情况被称为“case穿透，编程中需要回避因case穿透现象导致的程序bug”</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P14流程控制_if选择结构</title>
    <url>/2022/10/26/JavaSE/P14%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_if%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol>
<li><strong>if单选结构</strong><br> 语法: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 if语句用于需要选择是否执行某些语句的情况 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入内容:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals: 判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;Hello&quot;</span>))&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">        scanner.close;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 但输入的内容不等于”Hello”,布尔表达式不成立时<br> <img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221010204819.png"><br> 程序直接跳过了if语句内的代码，直接按顺序执行了下面的代码<br> <img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221010205022.png"><br> 当输入内容使表达式成立时，则执行语句内的内容</li>
<li><strong>if双选结构</strong><br> 语法: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果布尔值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 例子: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] Args)</span>&#123;</span><br><span class="line">        <span class="comment">//例:但考试分数大于等于60分为及格,小于60分为不及格</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>if多选结构</strong><br> 当用于判断多个选择结构时使用if多选结构。<br> 语法: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 例子: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] Args)</span>&#123;</span><br><span class="line">        <span class="comment">//成绩判断，分出各成绩区间的等级</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score==<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜满分!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">100</span> &amp;&amp; score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">90</span> &amp;&amp; score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">80</span> &amp;&amp; score&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">70</span> &amp;&amp; score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D级&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">60</span> &amp;&amp; score&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩不合法!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>if语句至少多一个 else 语句，else 语句在所有的 else if语句之后.</li>
<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前.</li>
<li>一旦其中一个 else if 语句检测为 true 其他的 else if 以及 else 语句将跳过执行</li>
</ol>
</blockquote>
</li>
<li><strong>嵌套的if结构</strong><br> 语法: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果表达式1的值为true执行代码</span></span><br><span class="line">    <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//如果表达式2的值为true执行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P16流程控制_while循环结构</title>
    <url>/2022/10/26/JavaSE/P16%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_while%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><ul>
<li>while是最基本的循环,他的结构为:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只要布尔表达式的值为true，循环就会一直执行下去。</li>
<li><strong>我们大多数情况是会让循环停止下来的，我们需要一个表达式失效的方式来结束循环。</strong></li>
<li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</li>
<li>循环条件一直为true就会造成无限循环，我们正常编程中应尽量避免死循环。会影响到程序性能或者造成该程序卡死崩溃！<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//例1: 输出1-100</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//例2: 计算1+2+...+100</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do while循环语句"></a>do while循环语句</h3><ul>
<li>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li>
<li>do while 循环和 while 循环相似，不同的是，do while循环至少执行一次。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure></li>
<li>while 和 do while 的区别:<ul>
<li>while先判断后执行。do while是先执行后判断!</li>
<li>do while 总是保证循环体会被至少执行一次!这是他们的主要差别。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(a&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a&lt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出如下<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221013102920.png"><br>此时while语句和do while的语句都不满足i&lt;0的条件，但do while语句因为是先执行后判断的规则，所以即使不满足条件程序也至少执行了一次。</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P17流程控制_for循环结构</title>
    <url>/2022/10/26/JavaSE/P17%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_for%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><ul>
<li>虽然所有循环结构都可以用 while 或者 do while表示，但是 java 提供了另一种语句———— for 循环语句，使一些循环结构变得更加简单。</li>
<li>for循环语句是支持迭代的一种通用结构，是最有效,是灵活的循环结构。</li>
<li>for循环执行的次数是在执行前就确定的。语法格式如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
例:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">//初始化条件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;  <span class="comment">//条件判断</span></span><br><span class="line">            System.out.println(a);  <span class="comment">//循环体</span></span><br><span class="line">            a+=<span class="number">2</span>;  <span class="comment">//迭代(更新)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;while循环结束！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化//条件判断//迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;for循环结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
关于for循环:<blockquote>
<p>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。<br>然后，检测布尔表达式的值。如果为true，循环体被执行。如果为flase，循环终止，开始执行循环体后面的语句。<br>执行一次循环后，更新循环控制变量(迭代因子控制循环变量的增减)。<br>再次检测布尔表达式。循环执行上面的过程。</p>
</blockquote>
</li>
</ul>
<p><strong>练习1:求100内奇数和偶数的和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//计算100内奇数和偶数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">oddSum</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">//奇数和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">evenSum</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">//偶数和</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                oddSum+=i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                evenSum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;奇数的和:&quot;</span>+oddSum);</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数的和:&quot;</span>+evenSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221013112413.png"></p>
<p><strong>练习2: 用while或for循环输出1-1000之间能被5整除的数，并且每行输出3个</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//输出1-1000之间能被5整除的数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i%(<span class="number">3</span>*<span class="number">5</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221013150554.png"></p>
<p><strong>练习3:打印九九乘法表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        九九乘法表:</span></span><br><span class="line"><span class="comment">        1*1=1	</span></span><br><span class="line"><span class="comment">        2*1=2	2*2=4	</span></span><br><span class="line"><span class="comment">        3*1=3	3*2=6	3*3=9	</span></span><br><span class="line"><span class="comment">        4*1=4	4*2=8	4*3=12	4*4=16	</span></span><br><span class="line"><span class="comment">        5*1=5	5*2=10	5*3=15	5*4=20	5*5=25	</span></span><br><span class="line"><span class="comment">        6*1=6	6*2=12	6*3=18	6*4=24	6*5=30	6*6=36	</span></span><br><span class="line"><span class="comment">        7*1=7	7*2=14	7*3=21	7*4=28	7*5=35	7*6=42	7*7=49	</span></span><br><span class="line"><span class="comment">        8*1=8	8*2=16	8*3=24	8*4=32	8*5=40	8*6=48	8*7=56	8*8=64	</span></span><br><span class="line"><span class="comment">        9*1=9	9*2=18	9*3=27	9*4=36	9*5=45	9*6=54	9*7=63	9*8=72	9*9=81</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆解步骤</span></span><br><span class="line">        <span class="comment">//1.先用单层for循环打印第一列</span></span><br><span class="line">        <span class="comment">//2.把固定的9再用一个循环包起来，通过嵌套实现输出9行</span></span><br><span class="line">        <span class="comment">//3.去掉重复项，i&lt;=j</span></span><br><span class="line">        <span class="comment">//4.调整格式,添加空格和换行</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>;i &lt;= j; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j * i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221013151722.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P19流程控制_break,contiune,goto</title>
    <url>/2022/10/26/JavaSE/P19%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_break,continue,goto/</url>
    <content><![CDATA[<h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><ul>
<li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环</strong>，不执行循环中剩余的语句。(break语句也在switch语句中使用)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">30</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><ul>
<li>continue语句用在循环语句体中,<strong>用于终止某次循环过程</strong>,即跳过循环体中尚未执行那个的语句,接着进行下一次是否执行循环的判定。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContinueDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221014002754.png"><br>程序每到10的倍数时就直接输出换行并跳过输出</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P18流程控制_增强for循环</title>
    <url>/2022/10/26/JavaSE/P18%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="增强for循环结构"><a href="#增强for循环结构" class="headerlink" title="增强for循环结构"></a>增强for循环结构</h2><ul>
<li>Java5引入了一种主要用于数组或集合的增强型 for 循环。</li>
<li>Java 增强 for 循环语法格式如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li>声明语句: 声明新的局部变量, 该变量的类型必须和数组元素的类型匹配。起作用域限定在循环语句块，其值与此时数组元素的值相等。</li>
<li>表达式: 表达式是要访问的数组名，或是返回值为数组的方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : numbers)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221013235055.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P20流程控制_打印三角形</title>
    <url>/2022/10/26/JavaSE/P20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6_%E6%89%93%E5%8D%B0%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<ul>
<li>例题：<br>打印一个5行的三角形<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Strin[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j&gt;=i; j--)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出效果:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221014004823.png"><br>三角形分为三个部分，使用了三个for循环依次打印:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221014005431.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P1基础_注释</title>
    <url>/2022/10/26/JavaSE/P1%E5%9F%BA%E7%A1%80_%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>注释不会被执行，是给写代码的人看的</li>
<li>书写注释是一个非常好的习惯</li>
<li>Java中的注释有三种：<ol>
<li>单行注释</li>
<li>多行注释</li>
<li>文档注释(JavaDoc)</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> viod <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//单行注释</span></span><br><span class="line">        <span class="comment">//输出一个Hello,World!</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多行注释   /*  注释  */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">//JavaDoc注释   /**  注释  */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *<span class="doctag">@Description</span> Helloworld</span></span><br><span class="line"><span class="comment">        *<span class="doctag">@Author</span> 作者</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P21方法_什么是方法</title>
    <url>/2022/10/26/JavaSE/P21%E6%96%B9%E6%B3%95_%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><ul>
<li>Java方法是语句的集合，他们在一起啊执行一个功能。<ul>
<li>方法是解决一类问题的步骤的有序组合</li>
<li>方法包含与类或对象中</li>
<li>方法在程序中被创建，在其他地方被引用</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">    <span class="comment">//mian方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221017200606.png"></p>
<ul>
<li><strong>方法的设计原则:</strong> 方法的本意是功能块，就是实现某个功能语句块的集合。我们设计方法的时候，最好保持方法的原子性，<strong>就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P23方法_方法的重载</title>
    <url>/2022/10/26/JavaSE/P23%E6%96%B9%E6%B3%95_%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><ul>
<li>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</li>
<li>方法重载的规则:<ul>
<li>方法名称必须相同。</li>
<li>参数列表必须不同（个数不同，或类型不同，参数排列顺序不同等）。</li>
<li>方法的返回值类型可以相同也可以不同。</li>
<li>仅仅返回类型不同不足以称为方法的重载。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">max2</span> <span class="operator">=</span> max(<span class="number">10.5</span>, <span class="number">20.5</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        System.out.println(max2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原本的max方法，只可以接收和返回int类型参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num1!=num2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">                result = num1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result = num2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载的max方法，用于处理浮点型数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2)</span> &#123;</span><br><span class="line">        <span class="comment">//方法名相同，参数列表不同</span></span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num1 != num2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">                result = num1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = num2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221018004458.png"><br>第一次输出调用的是第一个max方法,第二次因为是浮点类型的数据所以自动调用了重载的max方法。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>方法重载的实现理论:</strong></p>
<ul>
<li>方法的名称相同时，编译器会根据调用的方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P26方法_递归</title>
    <url>/2022/10/26/JavaSE/P26%E6%96%B9%E6%B3%95_%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul>
<li>A方法调用B方法，我们很容易理解</li>
<li>递归就是: A方法调用A方法，就是自己调用自己<br>&amp;emsp;</li>
<li>利用递归我们可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。<br>&amp;emsp;</li>
<li>递归结构包括两个部分:<ul>
<li>递归头: 什么时候不调用自身方法。如果没有头，将陷入死循环。</li>
<li>递归体: 什么时候需要调用自身方法。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">//5!   1*2*3*4*5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221020112339.png"><br>5! &#x3D; 120</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P22方法_方法的定义和调用</title>
    <url>/2022/10/26/JavaSE/P22%E6%96%B9%E6%B3%95_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ul>
<li>Java的方法类似其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>,一般情况下，定义一个方法包含以下语法:</li>
<li><strong>方法包含一个方法头和一个方法体</strong>。下面是一个方法的所有部分:<ul>
<li><strong>修饰符</strong>: 修饰符，这是可选的，高数编译器如何调用该方法。定义了该方法的访问类型。</li>
<li><strong>返回类型</strong>: 方法可能会返回值。returnValueType 是方法执行所需的操作，但没有返回值。这种情况下, returnValueType 是关键字 void。</li>
<li><strong>方法名</strong>: 是方法的实际名称。方法名和参数表共同构成方法签名.</li>
<li><strong>参数类型</strong>: 参数像是一个占位符。但方法被调用时，传递给参数，这个值被称为实参或变量。参数列表是指方法的参数类型,顺序参数的个数。参数是可选的，方法可以不包含任何参数。<ul>
<li>形式参数: 在方法被调用时用于接收外界输入的数据。</li>
<li>实参: 调用方法时实际传给方法的数据。</li>
</ul>
</li>
<li><strong>方法体</strong>: 方法体包含具体的语句，定义该方法的功能。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例:设计一个比大小的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比大小方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num1!=num2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">                result = num1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result = num2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><ul>
<li>调用方法: <code>对象名.方法名(实参列表)</code></li>
<li>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</li>
<li>但方法返回一个值的时候，方法调用通常被当做一个值。例如:<br><code>int larger = max(30, 40);</code></li>
<li>如果方法返回值是void,方法调用一定是一条语句。<br><code>System.out.println(&quot;Hello,World!&quot;);</code></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P25方法_可变参数</title>
    <url>/2022/10/26/JavaSE/P25%E6%96%B9%E6%B3%95_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul>
<li>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。</li>
<li>在方法声明中，在指定参数类型后加一个省略号(…)。</li>
<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。腾和普通的参数必须在它之前声明。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221020100307.png"><br>有时设计一个方法的时候参数的数量并不确定，为了避免上图这种重载很多遍的繁琐情况，可以使用可变参数来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用可变参数的方法</span></span><br><span class="line">        printMax(<span class="number">34</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(<span class="type">double</span>... numbers)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] &gt; result)&#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P24方法_命令行传参</title>
    <url>/2022/10/26/JavaSE/P24%E6%96%B9%E6%B3%95_%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><ul>
<li>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLine</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">//args.lenth 数组长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.lenth; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span>+i+<span class="string">&quot;]:&quot;</span>+args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用命令行编译，并添加参数运行<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221020094847.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P27数组_什么是数组</title>
    <url>/2022/10/26/JavaSE/P27%E6%95%B0%E7%BB%84_%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义:"></a>数组的定义:</h2><ul>
<li>数组是相同类型数据的有序集合。</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li>
<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li>
</ul>
<h2 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建:"></a>数组的声明和创建:</h2><ul>
<li>首先必须声明数组变量，才能在程序中使用数组。声明数组变量的语法:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">//首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[];   <span class="comment">//效果相同</span></span><br></pre></td></tr></table></figure></li>
<li>Java语言使用new操作符来创建数组，语法如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize]</span><br></pre></td></tr></table></figure></li>
<li>数组的元素是通过索引访问的，数组索引从0开始。</li>
<li>获取数组长度:<code>array.lenth</code><br>例:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] nums;  <span class="comment">//1.声明一个数组</span></span><br><span class="line"></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];  <span class="comment">//2.创建数组(分配空间)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//也可以连起来: int[] nums = new int[10];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.给数组中的元素赋值</span></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;总和为:&quot;</span>+ sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P28数组_内存分析与三种初始化</title>
    <url>/2022/10/26/JavaSE/P28%E6%95%B0%E7%BB%84_%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B8%8E%E4%B8%89%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h2><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221022164728.png"></p>
<h2 id="数组的三种初始化"><a href="#数组的三种初始化" class="headerlink" title="数组的三种初始化"></a>数组的三种初始化</h2><ol>
<li><strong>静态初始化:</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure></li>
<li><strong>动态初始化:</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>; </span><br></pre></td></tr></table></figure></li>
<li><strong>数组的默认初始化:</strong><br>  数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>
</ol>
<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//静态初始化: 创建+赋值</span></span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7.8</span>&#125;;</span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态初始化: 包含默认初始化</span></span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>静态初始化和动态初始化的区别</strong>:<br>  所谓的静态和动态是相对于程序运行是而言的，静态是在程序编译时就初始化好了的，动态初始化是在程序运行是才动态分配内存空间。对于代码而言，其实都可以。唯一不一样的地方， 就是动态的初始值都是0,静态的是直接给定值了。</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P29数组_数组概念小结</title>
    <url>/2022/10/26/JavaSE/P29%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E6%A6%82%E5%BF%B5%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="数组的四个基本点"><a href="#数组的四个基本点" class="headerlink" title="数组的四个基本点"></a>数组的四个基本点</h2><ul>
<li>其长度是确定的。数组一旦被创建，它的大小就是不可改变的。</li>
<li>其元素必须是想同类型，不允许出现混合类型。</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>
<li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身实在堆中的。</strong></li>
</ul>
<h2 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h2><ul>
<li><p><strong>下标的合法区间:[0,lenth-1],如果越界就会报错</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>报错:ArrayIndexOutOfBoundsException:数组下标越界异常！</strong></p>
</li>
<li><p>小结:</p>
<ul>
<li>数组是相同数据类型(数据类型可以为任意类型)的有序集合</li>
<li>数组也是对象。数组元素相当于对象的成员变量</li>
<li>数组长度是确定的，不可变的。如果越界，则报: ArrayIndexOutOfBounds</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P2基础_标识符和关键字</title>
    <url>/2022/10/26/JavaSE/P2%E5%9F%BA%E7%A1%80_%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li>Java中的关键字<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220711074335.png"></li>
</ul>
<blockquote>
<p>Java的所有组成部分都要名字；类名，变量名以及方法名都被称为标识符</p>
</blockquote>
<h2 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h2><ul>
<li>所有标识符都应该以字母（A-Z或者a-z），美元符（$）,或者下划线（_）开始</li>
<li>首字符之后可以是字母（A-Z或者a-z），美元符（$）,者下划线（_）或数字的任何字符组合</li>
<li><strong>不可以使用关键字作为变量名或方法名。</strong></li>
<li>标识符是<strong>大小写敏感</strong>的</li>
<li>合法字符举例：age &amp;emsp; $salary &amp;emsp; _value &amp;emsp; __1_value</li>
<li>非法标识符举例：123abc &amp;emsp; -salary &amp;emsp; #abc</li>
<li><strong>可以使用中文命名，但是一般不建议使用，也不建议使用拼音，很Low</strong></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P30数组_数组的使用</title>
    <url>/2022/10/26/JavaSE/P30%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><ul>
<li><p>For-Each 循环</p>
</li>
<li><p>数组作方法入参</p>
</li>
<li><p>数组作返回值</p>
<br/>
</li>
<li><p><strong>使用循环:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印全部的数组元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line">            System.out.println(arrays[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length;  i++)&#123;</span><br><span class="line">            sum += arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        <span class="comment">//查找最大的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; max)&#123;</span><br><span class="line">                max = arrays[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024104620.png"></p>
</li>
<li><p><strong>使用增强for循环:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> array : arrays)&#123;</span><br><span class="line">            System.out.println(array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024105426.png"></p>
</li>
<li><p><strong>数组作为方法参数和返回值:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArrays(arrays)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverseArray(<span class="type">int</span>[] arrays)&#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arrays.length-<span class="number">1</span>; i &lt; arrays.length; i++, j--)&#123;</span><br><span class="line">            result[j]  = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024111920.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P31数组_二维数组</title>
    <url>/2022/10/26/JavaSE/P31%E6%95%B0%E7%BB%84_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul>
<li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li>
<li>二维数组:<br><code>int a[][] = new int[2][5];</code></li>
<li>解析: 以上二位数组 a 可以看成一个两行五列的数组。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] arrays = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        printArray(arrays[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024151602.png"></li>
</ul>
<p><strong>二维数组的长度:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] arrays = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(arrays.length);</span><br><span class="line">        System.out.println(arrays[<span class="number">0</span>].length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024151756.png"><br>二维数组本身的长度为4，它包含了四个长度两个元素的一维数组。<br><strong>循环输出二维数组:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] arrays = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用两层循环输出整个二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrays[i].length; j++)&#123;</span><br><span class="line">                System.out.println(arrays[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024152449.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P32数组_Arrays类讲解</title>
    <url>/2022/10/26/JavaSE/P32%E6%95%B0%E7%BB%84_Arrays%E7%B1%BB%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类:"></a>Arrays类:</h2><ul>
<li><p>数组的工具类java.util.Arrays</p>
</li>
<li><p>由于数组对象本身没有什么方法可以提供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</p>
</li>
<li><p><strong>查看JDK帮助文档</strong></p>
</li>
<li><p>Array类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用(注意: 是“不用”而不是“不能”)</p>
<br/>
</li>
<li><p>具有以下常用功能:</p>
<ul>
<li>给数组排序: 通过 fill 方法。</li>
<li>对数组排序: 通过 sort 方法,按升序。</li>
<li>比较数组: 通过 equals 方法比较数组中元素是否相等。</li>
<li>查找数组元素: 通过 binarySearch 方法能对排序好的数组进行二分查找法操作。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9090</span>,<span class="number">31231</span>,<span class="number">543</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">23</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//输出: [I@1b6d3586 </span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//输出: [1, 2, 3, 4, 9090, 31231, 543, 21, 3, 23]</span></span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);  <span class="comment">//排序</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//输出: [1, 2, 3, 3, 4, 21, 23, 543, 9090, 31231]</span></span><br><span class="line"></span><br><span class="line">        Arrays.fill(a, <span class="number">0</span>);  <span class="comment">//填充</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//输出: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024160046.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P33数组_冒泡排序</title>
    <url>/2022/10/26/JavaSE/P33%E6%95%B0%E7%BB%84_%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul>
<li>冒泡排序是最出名的排序算法之一，总共用八大排序算法</li>
<li>分步:<ol>
<li>比较数组中，两个相邻的元素，如果第一个数比第二个数大，就交换他们的位置</li>
<li>每一次比较，都会产生出一个最大，或者最小的数字</li>
<li>下一轮则可以少一次排序</li>
<li>依次循环，直到结束<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo07</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a =&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">57</span>,<span class="number">32</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] sort = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort)); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//临时变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环，判断我们这个要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//内层循环,比较判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j+<span class="number">1</span>] &lt; array[j])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024165601.png"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P36面向对象_回顾方法的定义</title>
    <url>/2022/10/26/JavaSE/P36%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E5%9B%9E%E9%A1%BE%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h2><h3 id="方法的定义："><a href="#方法的定义：" class="headerlink" title="方法的定义："></a>方法的定义：</h3><ul>
<li><strong>修饰符</strong></li>
<li><strong>返回类型</strong></li>
<li><strong>break 和 return 的区别：</strong><ul>
<li>break 跳出switch, 结束循环</li>
<li>return 结束方法，返回一个返回值</li>
</ul>
</li>
<li><strong>方法名：</strong><ul>
<li>注意规范(首字符小写驼峰)</li>
<li>见名知意</li>
</ul>
</li>
<li><strong>参数列表：</strong><ul>
<li>参数类型，参数名</li>
<li>可变长参数列表</li>
</ul>
</li>
<li><strong>异常抛出：</strong><ul>
<li>疑问，后面讲解</li>
</ul>
</li>
</ul>
<h3 id="方法的调用："><a href="#方法的调用：" class="headerlink" title="方法的调用："></a>方法的调用：</h3><ul>
<li><strong>静态方法:</strong><ul>
<li>静态方法是与类一同初始化的方法</li>
<li>使用静态方法使用 “类名.方法名” 的格式来调用</li>
</ul>
</li>
<li><strong>非静态方法:</strong><ul>
<li>非静态方法是在对象实例化后才能调用的方法</li>
<li>使用非静态方法需要先实例化对象，再使用 “对象名.方法名” 的格式来调用</li>
</ul>
</li>
<li><strong>形参和实参:</strong><ul>
<li>形式参数和实际参数的类型要一一对应</li>
</ul>
</li>
<li><strong>值传递和引用传递:</strong><ul>
<li>Java中的参数都为值传递</li>
<li>见Demo04,05</li>
</ul>
</li>
<li><strong>this 关键字</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo01 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 方法名 (...)&#123;</span></span><br><span class="line"><span class="comment">        //方法体</span></span><br><span class="line"><span class="comment">        return 返回值;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//return 结束方法，返回一个结果！</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a; <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b ? a : b;  <span class="comment">//三元运算符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Student.staticSay();  </span><br><span class="line">        <span class="comment">//静态方法用类名.方法名直接调用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态方法不可以直接调用，需要先实例化为对象</span></span><br><span class="line">        <span class="comment">//实例化： 对象类型 对象名 = 对象值;</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">        <span class="comment">//实例化后使用对象名.方法名调用动态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticSay</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法与类一同存在，一同初始化，而动态方法在对象实例化之后才存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>&#123;</span><br><span class="line">    <span class="comment">//值传递演示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        Demo04.change(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(a); <span class="comment">//输出为 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="number">1</span> = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Java方法参数传递为值传递，在方法中改变参数的值并不会影响参数变量原本的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>&#123;</span><br><span class="line">    <span class="comment">//引用传递演示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);  <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        Demo05.change(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);  <span class="comment">//名字</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//person是一个对象: 指向的 ---&gt; Person person = new Person();</span></span><br><span class="line">        person.name = <span class="string">&quot;名字&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个Person类，有一个属性: name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;  <span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P34数组_稀疏数组</title>
    <url>/2022/10/26/JavaSE/P34%E6%95%B0%E7%BB%84_%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><ul>
<li><p>需求:编写五子棋游戏中，有存盘退出和续上盘的功能。<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024170941.png"></p>
</li>
<li><p>分析问题:因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</p>
</li>
<li><p>解决:稀疏数组</p>
<br/>
</li>
<li><p><strong>稀疏数组介绍:</strong></p>
</li>
<li><p>当一个数组中大部分元素为0，或者为同一数组时，可以使用稀疏数组来保存该数组。</p>
</li>
<li><p>稀疏数组的处理方式是:</p>
<ul>
<li>记录数组一共有几行几列，有多少个不同值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
<li><p>如下图: 左边是原始数组，右边是稀疏数组<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024171639.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo08</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建一个二维数组 11* 11 0: 没有棋子， 1.黑棋  2.白棋</span></span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始的数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换为稀疏数组储存</span></span><br><span class="line">        <span class="comment">//1.计算有效值的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值的个数:&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];  <span class="comment">//行数: 有效值个数(sum)+1  列数固定为3</span></span><br><span class="line">        <span class="comment">//打印表头</span></span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;   <span class="comment">//表头信息: 11行 11列 2个有效值个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值，存放稀疏数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array1[i].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];  <span class="comment">//表示该元素的值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>  <span class="number">0</span>; i &lt; array2.length; i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还原:</span></span><br><span class="line">        <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];<span class="comment">//11行11列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.给其中的元素还原他的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++)&#123;    <span class="comment">//array2.length为3,该循环将执行2遍</span></span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出还原的数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20221024213910.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P37面向对象_类与对象的创建</title>
    <url>/2022/10/26/JavaSE/P37%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul>
<li><p><strong>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。</strong></p>
<ul>
<li>动物，植物，手机，电脑…..</li>
<li>Person类，Pet类， Car类等，这些类都是用来描述&#x2F;定义一类具体事物应该具备的特点和行为<br/></li>
</ul>
</li>
<li><p><strong>对象是抽象概念的具体实例。</strong></p>
<ul>
<li>张三就是一个具体实例，张三家里的旺财就是狗的一个具体实例。</li>
<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>
</ul>
</li>
</ul>
<h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><ul>
<li><p><strong>使用new关键字创建对象</strong></p>
</li>
<li><p>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及类中构造器的调用</p>
<br/>
</li>
<li><p>类中的构造器也称为构造方法，是在进行创建对象的手必须要调用的。并且构造器有以下两个特点:</p>
<ol>
<li>必须和类的名字相同</li>
<li>必须没有返回值类型，也不能写void</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//类: 抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后悔返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是一个Student类的具体实例</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaohong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line"></span><br><span class="line">        xiaohong.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        xiaohong.age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaohong.name);</span><br><span class="line">        System.out.println(xiaohong.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">//属性: 字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P3基础_数据类型</title>
    <url>/2022/10/26/JavaSE/P3%E5%9F%BA%E7%A1%80_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p><strong>强类型语言：要求变量的使用要严格符合规定，所有变量都必须先定义后再使用</strong></p>
<blockquote>
<p>Java属于一种强类型语言</p>
</blockquote>
</li>
<li><p><strong>Java的数据类型分为两大类</strong></p>
<ol>
<li>基本类型(primitive type)</li>
<li>引用类型(reference type)</li>
</ol>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/QQ20220712033850.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//八大基本数据类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//整数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">//最常用</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">30L</span>;   <span class="comment">//Long类型要在数字后面加个L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//小数：浮点数</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">50.1F</span>;   <span class="comment">//float类型要在数字后面加个F</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">3.141592653589793238462643</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="comment">//字符串 注：String不是一个关键词</span></span><br><span class="line">        <span class="comment">//String name = &quot;Hello,World!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔值：是非</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P35面向对象_什么是面向对象</title>
    <url>/2022/10/26/JavaSE/P35%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="面向对象-amp-面向过程"><a href="#面向对象-amp-面向过程" class="headerlink" title="面向对象&amp;面向过程"></a>面向对象&amp;面向过程</h2><ul>
<li><strong>面向过程思想:</strong><ul>
<li>步骤清晰简单，第一步做什么，第二步做什么…</li>
<li>面向过程适合处理一些较为简单的问题</li>
</ul>
</li>
<li><strong>面向对象思想:</strong><ul>
<li>物以类聚，分类的思维模式，思考问题首先解决问题需要那些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li>
</ul>
</li>
</ul>
<blockquote>
<p>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍需要面向过程的思路去解决问题</p>
</blockquote>
<h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul>
<li>面向对象编程(Object-Oriented Programming, OOP)</li>
<li>面向对象的本质就是:<strong>以类的方式组织代码，以对象的组织(封装)数据。</strong></li>
<li>抽象</li>
<li>三大特性:<ul>
<li><strong>封装</strong></li>
<li><strong>继承</strong></li>
<li><strong>多态</strong></li>
</ul>
</li>
<li>从知识论角度考虑是先有对象后有类。对象，具体的事物。类,是抽象的，是对对象的抽象</li>
<li>从代码运行角度考虑是先有类后又对象。类是对象的模板。</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P38面向对象_构造器详解</title>
    <url>/2022/10/26/JavaSE/P38%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E6%9E%84%E9%80%A0%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>前面提到过的构造器也就是构造方法又有两个特点</p>
<ol>
<li>必须和类的名字相同</li>
<li>必须没有返回值类型，也不能写void</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//new 实例化了一个对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">xiaoming</span> <span class="operator">=</span> Person(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);  <span class="comment">//null</span></span><br><span class="line">        System.out.println(xiaoming.name);  <span class="comment">//小明</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//一个类即使什么都不写，它也悔存在一个方法</span></span><br><span class="line">    <span class="comment">//显示的定义构造器</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化初始值</span></span><br><span class="line">    <span class="comment">//使用 new 关键字，本质实在调用构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;   <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造: 一旦定义了有参构造，无参就必须显式定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;  <span class="comment">//有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;  <span class="comment">// 初始化参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>在new实例化生成对象时，本质上就是在调用类中定义的构造器</li>
<li>使用构造器用来初始化值</li>
</ol>
</blockquote>
<ul>
<li><strong>无参构造器:</strong><ul>
<li>类自带的无参数构造方法,但没有显式定义构造方法是无参构造器默认存在</li>
<li>但显式定义了有参构造器后，无参构造器会被替代，可以再将无参构造器显式定义出来已实现有参无参的重载</li>
</ul>
</li>
<li><strong>有参构造器:</strong><ul>
<li>默认类不自带有参构造器，需要手动定义</li>
<li>有参构造器的参数就是在使用 new 实例化对象时传入的实际参数</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P39面向对象_对象简单小结</title>
    <url>/2022/10/26/JavaSE/P39%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li><strong>类与对象:</strong><ul>
<li>类是一个模板: 抽象，对象时一个具体的实例</li>
</ul>
</li>
<li><strong>方法:</strong><ul>
<li>定义，调用</li>
</ul>
</li>
<li><strong>对象的引用:</strong><ul>
<li>引用类型： 除了基本类型(8个)</li>
<li>对象是用过引用来操作的: 栈—&gt; 堆</li>
</ul>
</li>
<li><strong>属性: 字段 Field 成员变量</strong><ul>
<li>默认初始化:</li>
<li>数字: 0 0.0</li>
<li>char: u0000</li>
<li>boolean: false</li>
<li>引用: null</li>
<li>修饰符 属性类型 属性名 &#x3D; 属性值;</li>
</ul>
</li>
<li><strong>对象的创建和使用</strong><ul>
<li>必须要使用 new 关键字创造对象，构造器 Person person &#x3D; new Person();</li>
<li>对象的属性 person.name</li>
<li>对象的方法 person.sleep();</li>
</ul>
</li>
<li><strong>类</strong><ul>
<li>静态的属性  属性</li>
<li>动态的行为  方法<br/></li>
</ul>
</li>
</ul>
<p>‘封装， 继承， 多态’</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P40面向对象_封装</title>
    <url>/2022/10/26/JavaSE/P40%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li><strong>该露的露，该藏的藏</strong><ul>
<li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合: 仅暴露少量的方法给外部使用。</li>
</ul>
</li>
<li><strong>封装 (数据的隐藏)</strong><ul>
<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口开访问，这称为信息隐藏。</li>
</ul>
</li>
<li><strong>属性私有， get&#x2F;set</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Srting[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;   <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;   <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些 public 的 get set 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 获得这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set 给这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>封装的优点:</strong></p>
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码实现细节</li>
<li>统一接口</li>
<li>提高系统可维护性</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P44面向对象_什么是多态</title>
    <url>/2022/10/31/JavaSE/P44%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指定对象的引用的类型有很多</p>
<br/>
</li>
<li><p>多态存在的条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类的方法</li>
<li>父类引用指向子类对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//new Person();</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了: 父类的引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//Student 能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//Person 为父类型，虽然可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        s1.run();   <span class="comment">//输出 StudentRun</span></span><br><span class="line">        s2.run();   <span class="comment">//输出 StudentRun</span></span><br><span class="line">        <span class="comment">//子类重写的父类的方法，执行子类的方法</span></span><br><span class="line"></span><br><span class="line">        s1.study();   <span class="comment">//输出 StudentStudy</span></span><br><span class="line">        s2.study();   <span class="comment">//报错，无法执行</span></span><br><span class="line">        <span class="comment">//s2对象类型为Person类，该类没有study方法</span></span><br><span class="line">        <span class="comment">//对象能执行那些方法，主要和左边的类型有关，和右边关系不大</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;StudentRun!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;StudentStudy!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PesonRun!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多态 注意事项:</strong></p>
<ol>
<li>多态是方法的多态，属性没有多态</li>
<li>要求：父类和子类，有联系 否则报类型转换异常ClassCastException</li>
<li>存在条件: 有继承关系，方法需要重写，父类引用指向子类对象 Father f1 &#x3D; new Son();</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P46面向对象_static详解</title>
    <url>/2022/11/01/JavaSE/P46%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_static%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="static静态"><a href="#static静态" class="headerlink" title="static静态"></a>static静态</h2><ul>
<li>静态属性</li>
<li>静态方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> ags;   <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;   <span class="comment">//非静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> go&#123;    <span class="comment">//静态方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run&#123;    <span class="comment">//非静态方法</span></span><br><span class="line">        go();  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Student.go();   <span class="comment">//类名.方法名 调用类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;    <span class="comment">//只执行一次</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">perosn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221101215855.png"></p>
</li>
<li><p>最先执行的为静态代码块，然后再按顺序结构</p>
</li>
<li><p>静态代码块只执行一次</p>
<br/>
</li>
<li><p>静态导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在测试类Test中，想要使用random方法,必须采用 类名.方法名 的格式调用,使用静态导入包操作就可以省去这个步骤直接使用方法名调用</p>
</li>
<li><p>格式:<code>import static 包名.类名.方法名;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;  <span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(random();)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P47面向对象_抽象类</title>
    <url>/2022/11/01/JavaSE/P47%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul>
<li><p>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法; 如果修饰类，那么该类就是抽象类。</p>
</li>
<li><p>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</p>
<br/>
</li>
<li><p>抽象类，不能使用new关键字来创造对象，它是用来让子类继承的。</p>
</li>
<li><p>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</p>
<br/>
</li>
<li><p>子类继承抽象方类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abstract 抽象类：  类 extends：   单继承(接口可以多继承)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="comment">//abstract 抽象方法,只有方法名字，没有方法实现！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomesthing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类的所有方法，继承了他的子类，都必须要实现它的方法，除非子类也是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>抽象类的特点:</p>
<ol>
<li>不能new这个抽象类，只能靠子类去实现它</li>
<li>抽象类中可以写普通的方法</li>
<li>抽象方法必须在抽象类中</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P45面向对象_instanceof和类型转换</title>
    <url>/2022/10/31/JavaSE/P45%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_instanceof%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><ul>
<li>用于判断两个类型之间是否存在继承关系</li>
<li>若存在返回true,否则返回false</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">//Object &gt; String</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//高==&gt;低，不需要手动类型转换</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj1</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        obj1.go();  <span class="comment">//正常输出: go!</span></span><br><span class="line">        obj1.run();  <span class="comment">//无法输出，因为对象obj1是Person类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这个obj1对象转换为Student类型，我们就可以使用Student类型的方法了！</span></span><br><span class="line">        ((Student)obj1).run();  <span class="comment">//正常输出: go!</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>类型转换注意点:</strong><ol>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型</li>
<li>把父类转换为子类，向下转型: 强制转换</li>
<li>类型转换的作用: 方便方法的调用，减少重复的代码</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P48面向对象_接口</title>
    <url>/2022/11/02/JavaSE/P48%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h2><ul>
<li><p>普通类：只有具体实现</p>
</li>
<li><p>抽象类：具体实现和规范(抽象方法)都有</p>
</li>
<li><p>接口: 只有规范(自己无法写方法)</p>
<br/>
</li>
<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。</p>
</li>
<li><p>接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</p>
</li>
<li><p>面向对象的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语(比如c++,java,c#)等，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</p>
<br/>
</li>
<li><p>接口的定义方法: interface+接口名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中定义的所有属性都默认为静态常量，相当于自带public static final修饰符</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span> <span class="operator">=</span><span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中的所有定义都是抽象的,相当于自带public abstract修饰符</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的实现类  使用 implements 关键字</span></span><br><span class="line"><span class="comment">//实现接口的类，必须要重写接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接口的作用与特点:</p>
<ol>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>方法均为 public abstract</li>
<li>属性均为 public static final</li>
<li>接口不能被实例化（接口中不存在构造方法）</li>
<li>可以用implements关键字可以实现多个接口</li>
<li>实现接口的类必须要重写接口中定义的方法</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P43面向对象_方法的重写</title>
    <url>/2022/10/31/JavaSE/P43%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><ul>
<li>需要有继承关系，子类重写父类的方法</li>
<li>重写只有方法的重写</li>
<li>方法的重写的特点：<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>方法体不同</li>
<li>修饰符: 范围可以扩大但不能缩小</li>
<li>抛出的异常: 范围可以缩小但不能扩大<blockquote>
<p>重写方法的意义:父类的功能，子类不一定需要，或者不一定满足》</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();   <span class="comment">//A</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();   <span class="comment">//子类重写了父类的方法</span></span><br><span class="line">        b.test();   <span class="comment">//B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="comment">//Override  重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221031022242.png"></li>
</ol>
</li>
<li><strong>注:不能重写的方法:</strong><ol>
<li>static 静态方法，从属于类，与实例对象无关</li>
<li>final 常量方法，常量不可改变</li>
<li>private 私有方法</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P4基础_数据类型拓展</title>
    <url>/2022/10/26/JavaSE/P4%E5%9F%BA%E7%A1%80_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//整数拓展  进制  二进制0b  十进制 0八进制 十六进制0x</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//浮点数拓展   银行业务怎么表示 钱？</span></span><br><span class="line">        <span class="comment">// 使用BigDecimal 数学工具类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// float 有限 离散 舍入误差 大约 接近但不等于</span></span><br><span class="line">        <span class="comment">// double</span></span><br><span class="line">        <span class="comment">//最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">//最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">//最好完全避免使用浮点数进行比较</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符拓展</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有字符的本质还是数字</span></span><br><span class="line">        <span class="comment">//编码 Unicode 2字节 65536</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转义字符</span></span><br><span class="line">        <span class="comment">// \t 制表符</span></span><br><span class="line">        <span class="comment">// \n 换行</span></span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔值拓展</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="literal">true</span>)&#123;&#125;   <span class="comment">//新手</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;&#125;   <span class="comment">//老手</span></span><br><span class="line">        <span class="comment">//Less is more! 代码要精简易读</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P50异常_Ereor和Exception</title>
    <url>/2022/11/03/JavaSE/P50%E5%BC%82%E5%B8%B8_Error%E5%92%8CException/</url>
    <content><![CDATA[<h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常:"></a>什么是异常:</h3><ul>
<li>软件程序在运行过程中，非常可能遇到异常问题，我们叫异常，英文是 Exception, 意为例外。这些例外情况需要怎么让我们写的程序作出合理的处理。而不至于程序崩溃。</li>
<li>异常指程序运行中出现的不期而至的各种状况，如:文件找不到，网络连接失败，非法参数等。</li>
<li>异常发生在程序运行期间，它影响了正常的程序执行流程。</li>
</ul>
<h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类:"></a>简单分类:</h3><ol>
<li><p>检查性异常：最具代表性的检查性异常是用户错误问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p>
<br/>
</li>
<li><p>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p>
<br/>
</li>
<li><p>错误(Error)：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译也检查不到的。</p>
</li>
</ol>
<h3 id="异常的体系结构"><a href="#异常的体系结构" class="headerlink" title="异常的体系结构:"></a>异常的体系结构:</h3><ul>
<li><p>Java把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</p>
<br/>
</li>
<li><p>在Java API中已经定义了许多异常类，这些异常分为两大类，错误Error和异常Excrption<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221103162029.png"></p>
</li>
</ul>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li><p>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</p>
<br/>
</li>
<li><p>Java虚拟机运行错误(VirtualMachineError),当JVM不再有继续执行所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止。</p>
<br/>
</li>
<li><p>还有发生在虚拟机试图执行应用时，如定义错误(NoClassDefFoundError),链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p>
</li>
</ul>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul>
<li><p>在Exception分支中有一个重要的子类RuntimeException(运行时异常)</p>
<ul>
<li>ArrayIndexOutOfBoundsException(数组下标越界)</li>
<li>NullPointerException(空指针异常)</li>
<li>ArithmeticException(算数异常)</li>
<li>MissingResourceException(丢失资源)</li>
<li>ClassNotFoundException(找不到类)</li>
<li>等等异常,这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。<br/></li>
</ul>
</li>
<li><p>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</p>
<br/>
</li>
<li><p><strong>Error和Exception的区别:</strong></p>
<ul>
<li>Error通常是灾难性的致命的错误，是程序无法控制和处理的，但出现这些异常时，Java虚拟机(JVM)一般会选择终止线程；</li>
<li>Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P54常用类_getClass方法</title>
    <url>/2022/11/05/JavaSE/P54%E5%B8%B8%E7%94%A8%E7%B1%BB_getClass%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h2><ul>
<li><p>返回值类型: final Class&lt;?&gt;</p>
</li>
<li><p>作用：返回引用中存储的实际对象类型</p>
<br/>
</li>
<li><p>应用：通常用于判断两个引用中实际村塾对象类型是否一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">	Student(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		<span class="comment">//判断s1与s2是否为用一类型</span></span><br><span class="line">		<span class="type">Class</span> <span class="variable">class1</span> <span class="operator">=</span> s1.getClass();</span><br><span class="line">		<span class="type">Class</span> <span class="variable">class2</span> <span class="operator">=</span> s2.getClass();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(class1==class2)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;s1和s2属于同一种类型&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;s1和s2不属于同一种类型&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221105215430.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P51异常_捕获和抛出异常</title>
    <url>/2022/11/04/JavaSE/P51%E5%BC%82%E5%B8%B8_%E6%8D%95%E8%8E%B7%E5%92%8C%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="异常的处理机制"><a href="#异常的处理机制" class="headerlink" title="异常的处理机制"></a>异常的处理机制</h2><ul>
<li><p>抛出异常</p>
</li>
<li><p>捕获异常</p>
<br/>
</li>
<li><p>异常的五个关键字:</p>
<ul>
<li>try, catch, finally, throw, throws</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//捕获异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;  <span class="comment">//try 监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;  <span class="comment">//catch 捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;  <span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221104125620.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主动抛出异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().test(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设在这个方法中处理不了这个异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        <span class="keyword">if</span> (b==<span class="number">0</span>)&#123;  <span class="comment">//throw 抛出异常 </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">            <span class="comment">//主动抛出异常,一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P49面向对象_内部类</title>
    <url>/2022/11/03/JavaSE/P49%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul>
<li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</li>
<li>有以下几种：<ol>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//如果要实例化内部类，需要用外部类的对象来new</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//内外部类可以直接获得外部类的私有属性</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getID</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P53常用类_Object类</title>
    <url>/2022/11/04/JavaSE/P53%E5%B8%B8%E7%94%A8%E7%B1%BB_Object%E7%B1%BB%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ul>
<li><p>Object类是超类，基类，所有类的直接或间接父类，位于继承数的最顶层。</p>
<br/>
</li>
<li><p>任何类，如果没有书写extends显式继承扣个类，都默认直接继承Object类，否则为间接继承。</p>
<br/>
</li>
<li><p>Object类中所定义的方法，是所有对象都具备的方法。</p>
<br/>
</li>
<li><p>Object类型可以存储任何对象。</p>
<ul>
<li>作为参数，可接受任何对象。</li>
<li>作为返回值，可返回任何对象。<br/></li>
</ul>
</li>
<li><p>Object类包含以下方法:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221104234933.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P42面向对象_Super详解</title>
    <url>/2022/10/29/JavaSE/P42%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_Super%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Super关键字"><a href="#Super关键字" class="headerlink" title="Super关键字"></a>Super关键字</h2><ul>
<li><p>对比this关键字，this代表当前类，super代表父类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.test(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;StudentName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;PersonName&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221029235550.png"></p>
<blockquote>
<p>父类中使用private关键字定义的属性和方法无法在子类中使用super关键字访问到</p>
</blockquote>
</li>
<li><p><strong>继承关系下构造器的调用：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    Student()&#123;</span><br><span class="line">        <span class="comment">//super();   //隐藏代码：调用父类构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student的无参构造执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    Person()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person的无参构造执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221030001825.png"></p>
</li>
<li><p><strong>证明了在实例化子类，调用子类的无参构造之前先调用了父类的无参构造器。</strong></p>
<br/></li>
</ul>
<h2 id="Super总结："><a href="#Super总结：" class="headerlink" title="Super总结："></a>Super总结：</h2><ul>
<li>super注意点:<ol>
<li>super调用父类的构造方法，必须在构造方法的第一个</li>
<li>super必须只能出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造该方法</li>
</ol>
</li>
<li>对比this：<ol>
<li>代表的对象不同:<ul>
<li>this: 本身调用者这个对象</li>
<li>super: 代表父类对象的引用</li>
</ul>
</li>
<li>前提:<ul>
<li>this: 没有继承也可以用</li>
<li>super: 只能在继承条件才可以使用</li>
</ul>
</li>
<li>构造方法:<ul>
<li>this();  本身的构造</li>
<li>super();  父类的构造</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P52异常_自定义异常与异常总结</title>
    <url>/2022/11/04/JavaSE/P52%E5%BC%82%E5%B8%B8_%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul>
<li><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</p>
<br/>
</li>
<li><p>在程序中使用自定义异常类，大体可以分为以下及格步骤:</p>
<ol>
<li>创建自定义异常类</li>
<li>在方法中通过throw关键字抛出异常对象</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常类MyException</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString: 异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span>+detail+<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出与捕获自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);  <span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(MyException e)&#123;</span><br><span class="line">            <span class="comment">//增加一些处理异常的代码</span></span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221104135709.png"></li>
</ol>
</li>
</ul>
<h2 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h2><ul>
<li><strong>实际应用中的经验总结:</strong><ul>
<li>处理运行时异常时，采用逻辑去合理规避同时辅助 try-catch 处理</li>
<li>在多重catch块后面，可以加一个catch(Exception)来处理可能被遗漏的异常</li>
<li>对于不确定的代码，也可以加上 try-catch ,处理潜在异常</li>
<li>尽量去处理异常，切忌只是简单地调用 printStackTrace()去打印输出</li>
<li>具体如何处理异常，要根据不同业务的需求和异常类型去决定</li>
<li>尽量添加finally语句块去释放占用的资源</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P55常用类_hashCode方法</title>
    <url>/2022/11/05/JavaSE/P55%E5%B8%B8%E7%94%A8%E7%B1%BB_hashCode%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><ul>
<li><p>返回值类型: int</p>
</li>
<li><p>用于返回对象的哈希码值。</p>
<br/>
</li>
<li><p>哈希值根据对象的<strong>地址</strong>或<strong>字符串</strong>或<strong>数字</strong>使用hash算法计算出来的int类型的数值。</p>
<br/>
</li>
<li><p>一般情况下相同对象返回相同哈希码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">	Student(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		</span><br><span class="line">        System.out.println(s1.hashCode());</span><br><span class="line">        System.out.println(s2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> s1;</span><br><span class="line"></span><br><span class="line">        System.out.println(s3.hashCode());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221106160154.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P56常用类_toString方法</title>
    <url>/2022/11/06/JavaSE/P56%E5%B8%B8%E7%94%A8%E7%B1%BBtoSting%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><ul>
<li><p>返回值: String</p>
</li>
<li><p>作用: 返回该对象的字符串表示（表现形式）</p>
<br/>
</li>
<li><p>可以根据程序需求重写该方法，如：展示对象各个属性值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">	Student(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.toString());</span><br><span class="line">        System.out.println(s2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221106161638.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P58常用类_finalize方法</title>
    <url>/2022/11/06/JavaSE/P58%E5%B8%B8%E7%94%A8%E7%B1%BB_finalize%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h2><ul>
<li><p>当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象，进入回收队列。</p>
<br/>
</li>
<li><p>垃圾对象：没有有效引用指向此对象，为垃圾对象。</p>
</li>
<li><p>垃圾回收：由GC销毁垃圾对象，释放数据存储空间。</p>
<br/>
</li>
<li><p>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象。</p>
</li>
<li><p>手动挥手机制：使用System.gc();通知JVM执行垃圾回收。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P57常用类_equals方法</title>
    <url>/2022/11/06/JavaSE/P57%E5%B8%B8%E7%94%A8%E7%B1%BB_equals%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h2><ul>
<li><p>返回值类型: boolean</p>
</li>
<li><p>参数类型: Object</p>
</li>
<li><p>默认实现为(this &#x3D;&#x3D; obj),用于比较两个对象地址是否相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object类中equals方法的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eequals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>==obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li><p>可进行重写，用于比较两个对象的内容是否相同。</p>
<ol>
<li>比较两个引用是否指向同一个对象</li>
<li>判断obj是否为null</li>
<li>判断两个引用指向的实际对象是否一致</li>
<li>强制类型转换</li>
<li>依次比较各个属性值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Student(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//instanceof 判断对象是否为某一类型</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            <span class="comment">//强制类型转</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)obj;</span><br><span class="line">            <span class="comment">//比较属性</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(s.getName())&amp;&amp;<span class="built_in">this</span>.age==s.getAge())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> staitc <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221106224648.png"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P59常用类_包装类</title>
    <url>/2022/11/07/JavaSE/P59%E5%B8%B8%E7%94%A8%E7%B1%BB_%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h2><ul>
<li>Java中的八大基本类型因为是基本类型，所以不含任何属性或方法，为了更方便的操作基本类型数据，Java提供了八大类型岁对应的引用类型，所对应的类就称为包装类。<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221107221241.png"></li>
<li><strong>Number类：</strong></li>
<li>包装类的父类</li>
<li>通过该类的方法可以实现包装类引用类型转换为基本类型<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221108231435.png"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">amin</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="comment">//基本类型</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">num1</span>  <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">		<span class="comment">//使用Integer类创建对象</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num1);</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> Integer.valueOf(num1);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//类型转换：拆箱，引用类型转换成基本类型</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">		<span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> integer3.intValue();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//JDK1.5之后，提供了自动装箱操作</span></span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">		<span class="comment">//自动装箱</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">integer4</span> <span class="operator">=</span> age;</span><br><span class="line">		<span class="comment">//自动拆箱</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> integer4;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P60常用类_基本类型和字符串转换</title>
    <url>/2022/11/09/JavaSE/P60%E5%B8%B8%E7%94%A8%E7%B1%BB_%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="基本类型与字符串之间的转换"><a href="#基本类型与字符串之间的转换" class="headerlink" title="基本类型与字符串之间的转换"></a>基本类型与字符串之间的转换</h2><ul>
<li><strong>基本类型转换为字符串：</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> calss Demo02&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//使用Integer包装类中的静态toString()方法</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> Integer.toString(n1);</span><br><span class="line">		<span class="comment">//一种偷懒的方法</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> n1+<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println(s1);  <span class="comment">//输出:&quot;100&quot;</span></span><br><span class="line">		System.out.println(s2);  <span class="comment">//输出:&quot;100&quot;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//toString的一个重载:</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">255</span>;</span><br><span class="line">		<span class="comment">//第二个参数代表以多少进制的格式转换</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> Integer.toString(n2, <span class="number">16</span>);</span><br><span class="line">		System.out.println(s3);  <span class="comment">//输出:&quot;ff&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>字符串转为基本类型:</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;150&quot;</span>;</span><br><span class="line">		<span class="comment">//使用Integer类中的静态parseInt()方法</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">		System.out.println(n2);  <span class="comment">//输出:150</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//Boolean</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> Boolean.parseBoolean(str2);</span><br><span class="line">		Ysstem.out.println(b1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注:</li>
<li>parseInt方法转换的字符串中不能包含任何非数字符号，否则抛出NumberFormatException异常</li>
<li>parseBoolean方法转换的字符串，只要不是”true”，转换结构均为false</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P5基础_类型转换</title>
    <url>/2022/10/26/JavaSE/P5%E5%9F%BA%E7%A1%80_%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul>
<li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换<blockquote>
<p>低———————————————————————&gt;高<br>byte, short, char &amp;nbsp; -&gt; &amp;nbsp; int &amp;nbsp; -&gt; &amp;nbsp; long &amp;nbsp; -&gt; &amp;nbsp; float &amp;nbsp; -&gt; &amp;nbsp; double</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><strong>运算中，不同类型的数据先转换为同一类型，然后进行计算。</strong></li>
<li><strong>转换方式</strong><ul>
<li>强制类型转换</li>
<li>自动类型转换</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br><span class="line">        <span class="comment">//强制转换   (类型)变量名   高--&gt;低</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> j;</span><br><span class="line">        <span class="comment">//自动转换     低--&gt;高</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注意点</strong><ol>
<li>不仅能对布尔值进行转换</li>
<li>不能把对象类型转化为不相干的类型</li>
<li>在把大容量转换到低容量的时候，强制转换</li>
<li>转换的时候可能存在内存溢出，或者精度问题！</li>
</ol>
</li>
</ul>
<hr>
<ul>
<li><strong>拓展:大容量数据计算</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//操作比较大的数的时候，注意溢出问题</span></span><br><span class="line">        <span class="comment">//JDK7新特性，数字之间可以用下划线分割</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">years</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">total1</span> <span class="operator">=</span> money*years;  <span class="comment">//计算的时候溢出了</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total2</span> <span class="operator">=</span> money*years;  <span class="comment">//默认是int，转换之前就已经出问题了？</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">total3</span> <span class="operator">=</span> money*((<span class="type">long</span>)years);  <span class="comment">//先把一个数转换为Long</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P61常用类_Integar缓冲区</title>
    <url>/2022/11/10/JavaSE/P61%E5%B8%B8%E7%94%A8%E7%B1%BB_Integar%E7%BC%93%E5%86%B2%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="整数缓冲区"><a href="#整数缓冲区" class="headerlink" title="整数缓冲区"></a>整数缓冲区</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//手动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">        System.out.println(int1 == int2);</span><br><span class="line">        <span class="comment">//输出: false</span></span><br><span class="line">        <span class="comment">//因为这里Integer为引用类型，比较的为地址而非数据，两个对象地址不同，固为false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int3</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int4</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        System.out.println(int3 == int4);</span><br><span class="line">        <span class="comment">//输出: true</span></span><br><span class="line">        <span class="comment">//自动装箱实际上调用的是类中的valueOf()静态方法</span></span><br><span class="line">        <span class="comment">//相当于</span></span><br><span class="line">        <span class="comment">//Integer int3 = Integer.valueOf(100);</span></span><br><span class="line">        <span class="comment">//Integer int4 = Integer.valueOf(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int5</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">int6</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        System.out.println(int5 == int6);</span><br><span class="line">        <span class="comment">//输出: false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为什么同样是使用自动装箱，int3,int4的对比结果与int5,int6的对比结构不同呢:</strong></p>
<ul>
<li><p>因为Java中一个Integer缓冲区，在Java中预先创建了256个常用的整数包装类型的对象，其中缓冲区中的范围是（-128，127）。</p>
<br/>
</li>
<li><p>如图所示为第二种情况<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221110174042.png"><br>int3与int4对象均为指向缓冲区内对应100对象的地址，所以相等</p>
<br/>
</li>
<li><p>如图所示为第三种情况<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221110174651.png"><br>int5与int6对象的值不在缓冲区范围内，所以创建了两个不同的地址来存放，所以int5与int6对象并不指向同一个地址，所以不相等</p>
</li>
</ul>
<blockquote>
<p>因为Java预先创建好256个常用的整数包装类型对象，在实际应用之中，对已创建的对象进行复用，从而提升效率</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P41面向对象_什么是继承</title>
    <url>/2022/10/26/JavaSE/P41%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1_%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h2><ul>
<li><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</p>
</li>
<li><p><strong>extands</strong>的意思的“扩展”。子类是父类的扩展。</p>
<br/>
</li>
<li><p><strong>Java中类只有单继承，没有多继承</strong>，一个父类可以有多个子类，但一个子类只能直接继承一个父类。</p>
<br/>

<ul>
<li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖，组合，聚合等。</li>
<li>继承关系的两个类，一个为子类(派生类),一个为父类(基类)。子类继承父类，使用关键字extends来表示。</li>
<li>子类和父类之间，从意义上讲应该具有”is a”的关系</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="comment">//人 : 父类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;说了一句话。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//使用public修饰符定义的属性和方法可以被子类继承，要是使用private关键字定义的则无法被继承</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		修饰符优先级排序:</span></span><br><span class="line"><span class="comment">		public</span></span><br><span class="line"><span class="comment">		protected</span></span><br><span class="line"><span class="comment">		default</span></span><br><span class="line"><span class="comment">		private</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Students</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="comment">//学生 is 人 : 派生类, 子类</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="comment">//老师 is 学生 : 派生类, 子类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">	<span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">	student.say();</span><br><span class="line">	<span class="comment">//student对象的类中并没有定义say方法，说明该方法是从Person类中继承而来的</span></span><br><span class="line">	System.out.println(student.money);</span><br><span class="line">	<span class="comment">//同理，属性也可以继承</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在Java中，所有的类都直接或者间接的继承Object类，Object类是所有类的父类</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P62常用类_String概述</title>
    <url>/2022/11/10/JavaSE/P62%E5%B8%B8%E7%94%A8%E7%B1%BB_String%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h2><ul>
<li>字符串是常量，创建以后不可改变</li>
<li>字符串字面值存储在字符串池（在方法区中）中，可以共享<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>“hello”常量存在字符串池中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>把”zhangsan”赋值给name变量，给字符串赋值时，并没有修改数据，而是在字符串池中新开辟皮革空间来存放”zhangsan”这个字符串，并把name变量指向的地址改为新字符串的地址。</li>
</ul>
</li>
</ul>
<br/>

<ul>
<li>字符串的两种定义方式：<ul>
<li>String s &#x3D; “Hello”; &#x2F;&#x2F;产生一个对象，存储在字符串池中。</li>
<li>String s &#x3D; new String(“Hello”);  &#x2F;&#x2F;产生两个对象，一个位于堆中，一个位于字符串池，变量名指向堆中的对象，堆中的对象为指向字符串池中字符串的对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">System.out.println(str==str2);</span><br><span class="line"><span class="comment">//输出：false</span></span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221113002452.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P63常用类_String类常用方法</title>
    <url>/2022/11/13/JavaSE/P63%E5%B8%B8%E7%94%A8%E7%B1%BB_String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="常用类方法"><a href="#常用类方法" class="headerlink" title="常用类方法"></a>常用类方法</h2><ul>
<li>int length()<ul>
<li>返回字符串的长度</li>
</ul>
</li>
<li>char charAt(int index)<ul>
<li>返回某个位置的字符</li>
</ul>
</li>
<li>boolean contains(String str)<ul>
<li>判断当前字符串是否包含指定字符串<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;java是世界上最好的编程语言&quot;</span>;</span><br><span class="line">        System.out.println(content.length());</span><br><span class="line">        System.out.println(content.charAt(content.length()-<span class="number">1</span>));</span><br><span class="line">        System.out.println(content.contains(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(content.contains(<span class="string">&quot;php&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221113005730.png"></li>
</ul>
</li>
<li>char[] toCharArray()<ul>
<li>将字符串转换为字符数组</li>
</ul>
</li>
<li>int indexOf(String str)<ul>
<li>查找指定字符串首次出现的位置，若不存在则返回-1</li>
</ul>
</li>
<li>int lastIndexOf(String str)<ul>
<li>查找指定字符串最后一次出现的位置，若不存在则返回-1<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;java是世界上最好的编程语言,java真香&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(content.toCharArray()));</span><br><span class="line">        System.out.println(content.indexOf(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(content.indexOf(<span class="string">&quot;php&quot;</span>));</span><br><span class="line">        System.out.println(content.lastIndexOf(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(content.lastIndexOf(<span class="string">&quot;php&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221113122238.png"></li>
</ul>
</li>
<li>String trim()<ul>
<li>去掉字符串前后的空格</li>
</ul>
</li>
<li>String toUpperCase()<ul>
<li>将小写转换成大写</li>
</ul>
</li>
<li>boolean endWith(String str)<ul>
<li>判断字符串是否以Str结尾<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;   Hello World   &quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(content.trim());</span><br><span class="line">        System.out.println(content.toUpperCase());</span><br><span class="line">        System.out.println(content.toLowerCase());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;hello.java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(filename.endsWith(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(filename.startsWith(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221113125144.png"></li>
</ul>
</li>
<li>String repace(charn,bchar)<br>String replace(CharSequence, CharSequence)<ul>
<li>替换字符串中的一段字符或字符串</li>
</ul>
</li>
<li>String[] split(String str)<ul>
<li>根据str堆字符串进行拆分<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;java是世界上最好的编程语言，java真香！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(content.replace(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//split方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">say</span> <span class="operator">=</span> <span class="string">&quot;Java is the best programing language&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String[] arr = say.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String str : arr)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用正则表达式让split可以同时识别空格和逗号进行分割</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">say1</span> <span class="operator">=</span> <span class="string">&quot;Java is the best programing language,java xiang&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String[] arr1 = say1.split(<span class="string">&quot;[ ,]+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String str : arr1)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221113140002.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P65常用类_StringBuffer和StringBuilder</title>
    <url>/2022/11/14/JavaSE/P65%E5%B8%B8%E7%94%A8%E7%B1%BB_StringBuffer%E5%92%8CStringBuilder/</url>
    <content><![CDATA[<h1 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h1><ul>
<li><p><strong>StringBuffer类:</strong><br>可变长字符串，JDK1.0提供，运行效率慢、线程安全。</p>
</li>
<li><p><strong>StringBuilder类:</strong><br>可变长字符串，JDK5.0提供，运行效率快、线程不安全。</p>
<br/>
</li>
<li><p>StringBuffer的方法使用与StringBuilder完全相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. append(); 追加</span></span><br><span class="line">        sb.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        sb.append(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        sb.append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. insert(); 插入</span></span><br><span class="line">        sb.insert(<span class="number">0</span>, <span class="string">&quot;我在最前面！&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. replace(); 替换</span></span><br><span class="line">        sb.replace(<span class="number">0</span>, <span class="number">6</span>, <span class="string">&quot;我被替换了！&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.delete();  删除</span></span><br><span class="line">        sb.delete(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="comment">//清空</span></span><br><span class="line">        sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        System.out.println(sb.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221115004419.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P66常用类_BigDecimal类</title>
    <url>/2022/11/15/JavaSE/P66%E5%B8%B8%E7%94%A8%E7%B1%BB_BigDecimal%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BigDecimalTest</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">double</span> d1 = <span class="number">1.0</span>;</span><br><span class="line">		<span class="built_in">double</span> d2 = <span class="number">0.9</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(d1-d2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221115230423.png"></p>
<ul>
<li><p>使用基本类型进行运算会出现如上精度丢失的情况，如果需要高精度计算的场合则需要使用到BigDecimal类以保证运算精度。</p>
<br/>
</li>
<li><p>使用包:<code>import java.math.BigDecimal;</code></p>
</li>
</ul>
<blockquote>
<p> 初始化BigDecimal对象值一定要使用字符串以保证精度</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalTest2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化BigDecimal对象值一定要使用字符串以保证精度</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">r1</span> <span class="operator">=</span> bd1.subtract(bd2);</span><br><span class="line">        System.out.println(r1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">r2</span> <span class="operator">=</span> bd1.add(bd2);</span><br><span class="line">        System.out.println(r2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">r3</span> <span class="operator">=</span> bd1.multiply(bd2);</span><br><span class="line">        System.out.println(r3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">r4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.4&quot;</span>)</span><br><span class="line">                .subtract(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.5&quot;</span>))</span><br><span class="line">                .divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>));</span><br><span class="line">        System.out.println(r4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221115233903.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P64常用类_String案例演示</title>
    <url>/2022/11/13/JavaSE/P64%E5%B8%B8%E7%94%A8%E7%B1%BB_String%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="String案例"><a href="#String案例" class="headerlink" title="String案例"></a>String案例</h1><ul>
<li>例题1:<ul>
<li>已知String str &#x3D; “this is a text”;<ol>
<li>将str中的单词单独获取出来</li>
<li>将str中的text替换为practice</li>
<li>在text前面插入一个easy</li>
<li>将每个单词的首字符改为大写<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;this is a text&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将str中的单词单独提取出来</span></span><br><span class="line">        String[] arr = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String each : arr)&#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将str中的text替换为practice</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;practice&quot;</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在text前插入一个easy</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;easy text&quot;</span>);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个单词的首字母改为大写</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String each : arr) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> each.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">uppedfirst</span> <span class="operator">=</span> Character.toUpperCase(first);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//substring()方法：截取字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">news</span> <span class="operator">=</span> uppedfirst + each.substring(<span class="number">1</span>);</span><br><span class="line">            result.append(news).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果:</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221114221950.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P67常用类_Date类</title>
    <url>/2022/11/16/JavaSE/P67%E5%B8%B8%E7%94%A8%E7%B1%BB_Date%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><ul>
<li>Date表示特定的瞬间，精确到毫秒。Date类中的大部分方法都已经被Calendar类中的方法所取代。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="comment">//1.创建Date对象</span></span><br><span class="line">		<span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">		System.out.println(date1.toString());</span><br><span class="line">		System.out.println(date1.toLocalString());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建一天前的时间</span></span><br><span class="line">		<span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(date1.getTime()- <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//判断方法 after before</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> date1.after(date2);</span><br><span class="line">		System.out.println(b1);</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> date.before(date2);</span><br><span class="line">		System.out.println(b2);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//比较方法 compareTo()</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> date1.compareTo(date2);</span><br><span class="line">		System.out.println(d);</span><br><span class="line">		<span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> date2.compareTo(date1);</span><br><span class="line">		System.out.println(d2);</span><br><span class="line">		<span class="type">int</span> <span class="variable">d3</span> <span class="operator">=</span> date2.compareTo(date2);</span><br><span class="line">		System.out.println(d3);</span><br><span class="line"></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> date1.equals(date2);</span><br><span class="line">		System.out.println(b3);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221117000305.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P6基础_变量，常量，作用域</title>
    <url>/2022/10/26/JavaSE/P6%E5%9F%BA%E7%A1%80_%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>变量是什么:就是意义变化的量！</p>
</li>
<li><p>Java是一种强类型语言，每个变量都必须声明其类型。</p>
</li>
<li><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和<strong>作用域</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type varName [=value] [&#123;,varName[=value]&#125;];</span><br><span class="line"><span class="comment">//数据类型 变量名 = 值;  可以使用逗号隔开来声明多个同类型变量。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项:</p>
<ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li>
<li>变量名必须是合法的标识符。</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li>
</ul>
</li>
</ul>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul>
<li>类变量</li>
<li>实例变量</li>
<li>局部变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubilc <span class="keyword">class</span> <span class="title class_">Variable</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="type">int</span> <span class="variable">allClicks</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">//类变量（static前缀）</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,world&quot;</span>;    <span class="comment">//实例变量 (在类里)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">//局部变量 (在方法里)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量</strong>:<br>定义在方法内，作用域尽在方法内可用，使用前必须先声明和初始化值。</p>
<p><strong>实例变量</strong>:<br>从属于对象，如果不自行初始化，默认值一般为0，布尔值为flase，基本类型以外均为null。</p>
<p><strong>类变量</strong>:<br>使用static关键词，从属于类。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li><p>常量(Constant):初始化(initialize)后不能再改变值！不会变动的值。</p>
</li>
<li><p>所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 final 关键词定义常量</span></span><br><span class="line"><span class="keyword">final</span> 常量名 = 值;</span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> PI - <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常量名一般使用大写字符。</p>
</li>
</ul>
<h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ul>
<li>所有变量，方法，类名: 见名知意</li>
<li><strong>类成员变量: 首字母小写的驼峰原则: monthSalary</strong></li>
<li><strong>局部变量: 首字母小写的驼峰原则: (同上）</strong></li>
<li><strong>常量: 大写组合下划线: MAX_VALUE</strong></li>
<li><strong>类名: 首字母大写的驼峰原则: Man, GoodMan</strong></li>
<li><strong>方法名:首字母小写的驼峰原则: run(),runRun()</strong></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P69常用类_SimpleDateFormat</title>
    <url>/2022/11/18/JavaSE/P69%E5%B8%B8%E7%94%A8%E7%B1%BB_SimpleDateFormat/</url>
    <content><![CDATA[<h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><ul>
<li>SimpleDateFormat是一个与语言环境有关的方式来格式化和解释日期的具体类。</li>
<li>进行格式化（日期-&gt;文本）、解析（文本-&gt;日期）。</li>
<li>常用的时间模式字母<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221118231316.png"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//创建SimpleDateFormat对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Date</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化(把Date对象转换为字符串)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析(把字符串转成Date对象)</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> sdf2.parse(<span class="string">&quot;1990/05/01&quot;</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221118235806.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P70常用类_System类</title>
    <url>/2022/11/20/JavaSE/P70%E5%B8%B8%E7%94%A8%E7%B1%BB_System%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><ul>
<li><p>System系统类，主要用于获取系统的属性数据和其他操作，构造方法为私有。</p>
</li>
<li><p>常用方法列表<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221120011118.png"></p>
<br/>
</li>
<li><p>arraycopy()方法:</p>
<ul>
<li>该方法是一个本地方法，没有方法体，具体是由jvm内部使用c或c++代码来实现的，所以效率比较高。</li>
<li>字符串array对象中的array.copyOf()方法内部，实际上就是调用本方法来实现的。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//System.arraycopy()方法: 数组的复制</span></span><br><span class="line">        <span class="comment">//src: 原数组</span></span><br><span class="line">        <span class="comment">//srcPos: 从哪个位置开始复制 0</span></span><br><span class="line">        <span class="comment">//dest: 目标数组的位置</span></span><br><span class="line">        <span class="comment">//length: 复制的长度</span></span><br><span class="line">        <span class="type">int</span>[] src = &#123;<span class="number">20</span>,<span class="number">18</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">35</span>,<span class="number">26</span>,<span class="number">45</span>,<span class="number">90</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, src.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> each : dest) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//currentTimeMillis()方法: 返回从1970.1.1到现在过去的毫秒值</span></span><br><span class="line">		System.out.println(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//System.gc()方法: 通知垃圾回收器回收垃圾</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">		System.gc();</span><br><span class="line">		<span class="comment">//创建了三个对象但是不赋给任何变量，此时就产生了三个垃圾对象，使用System.gc()方法可以手动通知jvm回收垃圾</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//System.exit()方法: 退出jvm</span></span><br><span class="line">		System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;我在exit()方法之后！&quot;</span>);</span><br><span class="line">		<span class="comment">//因为此时jvm已经退出所以并不会执行这行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221121014217.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P68常用类_Calendar类</title>
    <url>/2022/11/17/JavaSE/P68%E5%B8%B8%E7%94%A8%E7%B1%BB_Calendar%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><ul>
<li>Calendar提供类获取或设置各种日历字段的方法。</li>
<li>构造方法<ul>
<li>protected Calendar();</li>
<li>由于使用了protected修饰符，所以无法直接创建对象。</li>
</ul>
</li>
<li>常用方法列表:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221117230812.png"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建Calendar对象</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span>Calendar.getInstance();</span><br><span class="line">        System.out.println(calendar.getTime().toLocaleString());</span><br><span class="line">        System.out.println(calendar.getTimeInMillis());</span><br><span class="line">        <span class="comment">//获取时间信息</span></span><br><span class="line">        <span class="comment">//获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">//月 0-11</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH);</span><br><span class="line">        <span class="comment">//日</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="comment">//小时</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);  <span class="comment">//HOUR 12小时 HOUR_OF_DAY 24小时</span></span><br><span class="line">        <span class="comment">//分钟</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="comment">//秒</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> calendar.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        System.out.println(year+<span class="string">&quot;年&quot;</span>+(month+<span class="number">1</span>)+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日&quot;</span>+hour+<span class="string">&quot;时&quot;</span>+minute+<span class="string">&quot;分&quot;</span>+second+<span class="string">&quot;秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改时间</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar2.set(Calendar.DAY_OF_MONTH, <span class="number">5</span>);</span><br><span class="line">        System.out.println(calendar2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add方法修改时间</span></span><br><span class="line">        calendar2.add(Calendar.HOUR, <span class="number">1</span>);</span><br><span class="line">        System.out.println(calendar2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> calendar2.getActualMaximum(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> calendar2.getActualMinimum(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221118230809.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P71常用类_常用类小结</title>
    <url>/2022/11/21/JavaSE/P71%E5%B8%B8%E7%94%A8%E7%B1%BB_%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="常用类总结"><a href="#常用类总结" class="headerlink" title="常用类总结"></a>常用类总结</h2><ul>
<li>内部类：<ul>
<li>在一个类的内部再定义一个完整的类。</li>
<li>成员内部类、静态内部列、局部内部类、匿名内部类。</li>
</ul>
</li>
<li>Object类：<ul>
<li>所有类的直接或间接父类，可存储任何对象。</li>
</ul>
</li>
<li>包装类：<ul>
<li>基本数据类型所对应的引用类型，可以使用Object统一所有数据。</li>
</ul>
</li>
<li>String类：<ul>
<li>字符串是常量，创建以后不可改变，字面值保存在字符串池中，可以共享。</li>
</ul>
</li>
<li>BigDecimal类：<ul>
<li>可以精确计算浮点数。</li>
</ul>
</li>
<li>Date类：<ul>
<li>特定时间。</li>
<li>已经过时，部分方法已弃用。</li>
</ul>
</li>
<li>Calendar类：<ul>
<li>Date类的改进版。</li>
</ul>
</li>
<li>SimpleDateFormat类：<ul>
<li>格式化转化时间对象。</li>
</ul>
</li>
<li>System类：<ul>
<li>系统类。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P72集合框架_集合概念</title>
    <url>/2022/11/22/JavaSE/P72%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E9%9B%86%E5%90%88%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h2><ul>
<li><p><strong>概念：对象的容器，定义了对多个对象进行操作的常用方法。可实现数组的功能。</strong></p>
<br/>
</li>
<li><p>和数组的区别：</p>
<ol>
<li>数组长度固定，集合长度不固定。</li>
<li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li>
</ol>
</li>
<li><p>位置:</p>
<ul>
<li>java.util.*;</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P73集合框架_Collection体系</title>
    <url>/2022/11/24/JavaSE/P73%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Collection%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h2><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221122005346.png"></p>
<ul>
<li><p><strong>Collection父接口：</strong></p>
<ul>
<li>特点: 代表一组任意类型的对象，无序、无下标、不能重复。</li>
<li>方法:<ul>
<li><code>boolean add (Object obj)</code><br> &#x2F;&#x2F;添加一个对象</li>
<li><code>boolean addAll (Collection c)</code><br> &#x2F;&#x2F;将一个集合中的所有对象添加到此集合中</li>
<li><code>void clear()</code><br> &#x2F;&#x2F;清空此集合中的所有对象</li>
<li><code>boolean contains(Object o)</code><br> &#x2F;&#x2F;检查此集合中是否包含o对象</li>
<li><code>boolean equals(Object o)</code><br> &#x2F;&#x2F;比较集合是否与指定对象相等</li>
<li><code>boolean isEmpty()</code><br> &#x2F;&#x2F;判断此集合是否为空</li>
<li><code>boolean remove(Object o)</code><br> &#x2F;&#x2F;在此集合中移除o对象</li>
<li><code>int seze()</code><br> &#x2F;&#x2F;返回此集合中的元素个数</li>
<li><code>Object[] toArray()</code><br> &#x2F;&#x2F;将此集合转换成数组<br/></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>集合的使用演示:</strong></p>
<ol>
<li>添加元素</li>
<li>删除元素</li>
<li>遍历元素</li>
<li>判断<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//创建集合</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    collection.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;元素个数:&quot;</span>+collection.size());</span><br><span class="line">    System.out.println(collection.toString());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    collection.remove(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除之后：&quot;</span>+collection.toString());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="comment">//1.使用增强for循环语句遍历</span></span><br><span class="line">    System.out.println(<span class="string">&quot;使用增强for遍历；&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(Object object : collection)&#123;</span><br><span class="line">        System.out.println((String)object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.使用迭代器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;使用迭代器遍历：&quot;</span>);</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">    <span class="comment">//iterator的三个方法:</span></span><br><span class="line">    <span class="comment">//hasNext();  有没有下一个元素，返回布尔</span></span><br><span class="line">    <span class="comment">//next();  获取下一个元素</span></span><br><span class="line">    <span class="comment">//remove();  删除下一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String)it.next();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用迭代器删除集合中的元素:</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String)it.next();</span><br><span class="line">        <span class="comment">//collection.remove(s);</span></span><br><span class="line">        <span class="comment">//这里不能使用collection中的remove方法，否则会报并发修改异常</span></span><br><span class="line">        <span class="comment">//需要使用迭代器iterator中的remove方法</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;元素个数:&quot;</span>+collection.size());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    System.out.println(collection.contains(<span class="string">&quot;西瓜&quot;</span>));</span><br><span class="line">    System.out.println(collection.isEmpty());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221124014433.png"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P74集合框架_Collection的使用2</title>
    <url>/2022/11/26/JavaSE/P74%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Collection%E7%9A%84%E4%BD%BF%E7%94%A82/</url>
    <content><![CDATA[<h2 id="集合的使用2"><a href="#集合的使用2" class="headerlink" title="集合的使用2"></a>集合的使用2</h2><ul>
<li>保存学生信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//新建一个Collection对象</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张无忌&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王二&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        collection.add(s1);</span><br><span class="line">        collection.add(s2);</span><br><span class="line">        collection.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数:&quot;</span>+collection.size());</span><br><span class="line">        System.out.println(collection.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------使用增强for------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object object : collection)&#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)object;</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------使用迭代器-------&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span>(Student)it.next();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;判断是否包含s1:&quot;</span>+collection.contains(s1));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断集合是否为空:&quot;</span>+collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        collection.remove(s1);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后元素个数:&quot;</span>+collection.size());</span><br><span class="line">        System.out.println(collection.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span>+ name +<span class="string">&quot;, age= &quot;</span>+ age +<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221126010751.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P75集合框架_List集合</title>
    <url>/2022/11/27/JavaSE/P75%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_List%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="List接口："><a href="#List接口：" class="headerlink" title="List接口："></a>List接口：</h2><ul>
<li>特点：有序、有下标、元素可以重复。</li>
<li>方法：<ul>
<li><code>void add(int index, Object o)</code><br> &#x2F;&#x2F;在index位置插入对象o</li>
<li><code>boolean addAll(int index, Collection c)</code><br> &#x2F;&#x2F;将一个集合中的元素添加到此集合中的index位置。</li>
<li><code>Object get(int index)</code><br> &#x2F;&#x2F;返回集合中指定位置的元素</li>
<li><code>List subList(int formIndex, int toIndex)</code><br> &#x2F;&#x2F;返回fromIndex和toIndex之间的集合元素。</li>
</ul>
</li>
<li>List迭代器:<ul>
<li><code>ListIterator lit = list.listIterator();</code></li>
<li>与Iterator的区别：<ul>
<li>ListIterator的功能更加强大，可以向前或向后遍历、添加、删除、修改元素。</li>
</ul>
</li>
<li>方法列表:<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221127232647.png"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//先创建集合对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;华为&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数:&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用for：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强for：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object object : list)&#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用迭代器：&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用列表迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用列表迭代器：&quot;</span>);</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">lit</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        System.out.println(<span class="string">&quot;从前往后：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(lit.hasNext())&#123;</span><br><span class="line">            System.out.println(lit.nextIndex()+<span class="string">&quot;:&quot;</span>+lit.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为此时迭代器已经迭代至最后一个元素，所以可以直接开始从后往前遍历。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;从后往前:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(lit.hasPrevious())&#123;</span><br><span class="line">            System.out.println(lit.previousIndex()+<span class="string">&quot;:&quot;</span>+lit.previous());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;苹果&quot;</span>));</span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;华为&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221128004015.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P77集合框架_List的实现类</title>
    <url>/2022/11/30/JavaSE/P77%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_List%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="List-实现类"><a href="#List-实现类" class="headerlink" title="List 实现类"></a>List 实现类</h1><ul>
<li><strong>ArrayList：</strong><ul>
<li>数组结构实现，查询快、增删慢；</li>
<li>Jdk1.2版本,运行效率快、线程不安全。</li>
</ul>
</li>
<li>Vector：<ul>
<li>数组结构实现，查询快、增删满；</li>
<li>JDK1.0版本，运行效率慢、线程安全。</li>
</ul>
</li>
<li>LinkedList：<ul>
<li>链表结构实现，增删快，查询慢。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P76集合框架_List集合2</title>
    <url>/2022/11/28/JavaSE/P76%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_List%E9%9B%86%E5%90%882/</url>
    <content><![CDATA[<h2 id="List的使用2"><a href="#List的使用2" class="headerlink" title="List的使用2"></a>List的使用2</h2><ul>
<li>添加数字数据<ul>
<li>List集合在添加数字数据的时候会进行<strong>自动装箱操作</strong>，将基本类型的数字数据自动装箱为对相应的包装类对象。</li>
</ul>
</li>
<li>删除数字数据<ul>
<li>List集合在删除数字数据的时候需要使用<strong>引用类型</strong>来指定操作元素，如使用基本类型数字则表示删除指定下标的数据。</li>
</ul>
</li>
<li>SubList()方法<ul>
<li><code>List SubList(int fromIndex，int toIndex)</code></li>
<li>用于返回一个子集合。</li>
<li>子集合截取的范围从参数fromIndex指定的下标到参数toIndex所指定的下标，遵循含头不含尾规则，即<strong>包含下标为fromIndex的元素但不包含下标为toIndex的元素</strong>。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数字数据(自动装箱)</span></span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        list.add(<span class="number">60</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除操作</span></span><br><span class="line">        <span class="comment">//list.remove(20);  //此代码义为删除下标为20的元素</span></span><br><span class="line">        <span class="comment">//若要删除指定内容的元素，则需要进行类型转换:</span></span><br><span class="line">        list.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后元素个数：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充方法SubList()：返回子集合，含头不含尾</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> list.subList(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;subList：&quot;</span>+subList.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221129003036.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P78集合框架_ArrayList的使用</title>
    <url>/2022/11/30/JavaSE/P78%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_ArrayList%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="ArrayList的使用"><a href="#ArrayList的使用" class="headerlink" title="ArrayList的使用"></a>ArrayList的使用</h1><ul>
<li><p>添加元素</p>
</li>
<li><p>删除元素</p>
<ul>
<li>使用remove方法删除相同对象</li>
</ul>
</li>
<li><p>遍历元素</p>
<ul>
<li>使用迭代器<ul>
<li>Iterator迭代器</li>
<li>ListIterator列表迭代器</li>
</ul>
</li>
</ul>
</li>
<li><p>判断元素</p>
<ul>
<li>contains方法判断是否存在指定元素</li>
<li>判断相同对象同remove需要重写equals</li>
</ul>
</li>
<li><p>查找元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------添加元素------------&quot;</span>);</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;郭富城&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;梁朝伟&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        arrayList.add(s1);</span><br><span class="line">        arrayList.add(s2);</span><br><span class="line">        arrayList.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数:&quot;</span>+arrayList.size());</span><br><span class="line">        System.out.println(arrayList.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------遍历元素------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用迭代器:&quot;</span>);</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) it.next();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用列表迭代器:&quot;</span>);</span><br><span class="line">        <span class="comment">//使用列表迭代器</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">lit</span> <span class="operator">=</span> arrayList.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (lit.hasNext()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) lit.next();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;逆序:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (lit.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) lit.previous();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------判断元素------------&quot;</span>);</span><br><span class="line">        <span class="comment">//判断元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含s1:\n&quot;</span>+arrayList.contains(s1));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含new Student(\&quot;刘德华\&quot;, 20):\n&quot;</span>+arrayList.contains(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否为空:\n&quot;</span>+arrayList.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------判断元素------------&quot;</span>);</span><br><span class="line">        <span class="comment">//查找元素</span></span><br><span class="line">        System.out.println(arrayList.indexOf(s3));</span><br><span class="line">        System.out.println(arrayList.indexOf(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;梁朝伟&quot;</span>, <span class="number">18</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221201005425.png"></p>
</li>
<li><p><strong>如何实现remove方法相同对象删除功能：</strong></p>
<ul>
<li>使用remove方法传入的对象，如果地址不是待删除对象本身，则无法删除:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line">arrayList.remove(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure></li>
<li>remove方法判断传入对象为什么对象使用的是对象内继承自Object类的equals方法,该方法比较的为对象的引用地址。</li>
<li>若此时想要通过比较对象的属性内容来判断是否为待删除对象本身，则需要在Student类中重写equals方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">      <span class="comment">//1.判断是不是同一个对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//2.判断是否为空</span></span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.判断是否是Student类型</span></span><br><span class="line">      <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">          <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)obj;</span><br><span class="line">          <span class="comment">//4.比较属性</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.name.equals(s.getName()) &amp;&amp; <span class="built_in">this</span>.age == s.getAge()) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//5.不满足条件返回</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P79集合框架_Vector的使用</title>
    <url>/2022/12/02/JavaSE/P79%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Vector%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vector与ArrayList的对比："><a href="#Vector与ArrayList的对比：" class="headerlink" title="Vector与ArrayList的对比："></a>Vector与ArrayList的对比：</h1><ul>
<li>ArrayList 【重点】：<ul>
<li>数组结构实现，查询快、增删慢；</li>
<li>JDK1.2版本，运行效率快、线程不安全。</li>
</ul>
</li>
<li>Vector：<ul>
<li>数组结构实现，查询快、增删慢；</li>
<li>JDK1.0版本，运行效率慢、线程安全。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        vector.add(<span class="string">&quot;草莓&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;芒果&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+vector.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用枚举器(vector特有)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用枚举器遍历:&quot;</span>);</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">en</span> <span class="operator">=</span> vector.elements();</span><br><span class="line">        <span class="keyword">while</span> (en.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> en.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) o;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;判断:&quot;</span>);</span><br><span class="line">        System.out.println(vector.contains(<span class="string">&quot;西瓜&quot;</span>));</span><br><span class="line">        System.out.println(vector.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//vector的其他方法</span></span><br><span class="line">        <span class="comment">//firstElement、lastElement、lementAt();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221202235358.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P7e基础_位运算符</title>
    <url>/2022/10/26/JavaSE/P7e%E5%9F%BA%E7%A1%80_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote>
<p>位运算符: &amp;, &amp;|, ^, ~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  A = 0011 1100</span><br><span class="line">  B = 0000 1101</span><br><span class="line"></span><br><span class="line">A&amp;B = 0000 1100</span><br><span class="line">A|B = 0011 1101</span><br><span class="line">A^B = 0011 0001 //异或</span><br><span class="line"> ~B = 1111 0010 //取反</span><br><span class="line"></span><br><span class="line"> 左移 &lt;&lt;  *2</span><br><span class="line"> 右移 &gt;&gt;  /2</span><br><span class="line"></span><br><span class="line"> 0000 0000      0</span><br><span class="line"> 0000 0001      1</span><br><span class="line"> 0000 0010      2</span><br><span class="line"> 0000 0100      4</span><br><span class="line"> 0000 1000      8</span><br><span class="line"> 0001 0000      16</span><br><span class="line"></span><br><span class="line"> //位运算的效率级高</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P7基础_基本运算符</title>
    <url>/2022/10/26/JavaSE/P7%E5%9F%BA%E7%A1%80_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>Java 语言支持如下运算符:<ul>
<li><strong>算数运算符: +, -, <em>, &#x2F;, %, ++, –</em></strong></li>
<li><strong>赋值运算符: &#x3D;</strong></li>
<li><strong>关系运算符: &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;&#x3D;, !&#x3D;, instanceof</strong></li>
<li><strong>逻辑运算符: &amp;&amp;, ||, !</strong></li>
<li>位运算符: &amp;, &amp;|, ^, ~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</li>
<li><strong>条件运算符: ? :</strong></li>
<li><strong>扩展赋值运算符: +&#x3D;, -&#x3D;, <em>&#x3D;, &#x2F;&#x3D;</em></strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//算数运算符（二元运算符）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        System.out.println(a-b);</span><br><span class="line">        System.out.println(a*b);</span><br><span class="line">        System.out.println(a/(<span class="type">double</span>)b); <span class="comment">//注意取值范围</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//关系运算符返回的结果: true/false (布尔值)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">        Syetem.out.println(c % a); <span class="comment">//%取余 输出结果:1  (c / a = 2 ....... 1)</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; b);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(a &lt; b);  <span class="comment">//true </span></span><br><span class="line">        System.out.println(a == b);  <span class="comment">//false</span></span><br><span class="line">        System.ouy.println(a != b);  <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//自增自减运算符： ++  --  (一元运算符)</span></span><br><span class="line">        <span class="comment">//  a++  就等于 a = a + 1 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;  <span class="comment">//先给b赋值，再自增</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;  <span class="comment">//先自增，再给c赋值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a);  <span class="comment">// 5</span></span><br><span class="line">        System.out.println(b);  <span class="comment">// 3</span></span><br><span class="line">        System.out.println(c);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充：幂运算 2^3  2*2*2=8 （很多运算需要使用到工具类） </span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(pow); <span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//逻辑运算符  与 或 非</span></span><br><span class="line">        <span class="comment">// &amp;&amp; 逻辑与运算：两个变量都为真，结果才为真</span></span><br><span class="line">        <span class="comment">// || 逻辑或运算，两个变量有一个为真，结果就为真</span></span><br><span class="line">        <span class="comment">// ！ 逻辑非运算，如果是真变为假，若果是假变为真</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a &amp;&amp; b);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(a || b);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(!(a &amp;&amp; b));  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路运算 ：当程序进行与运算时符号前的变量为假，则不运行符号后的代码，直接输出结果为假</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c &lt; <span class="number">4</span>)&amp;&amp;(c++ &lt; <span class="number">4</span>);</span><br><span class="line">        System.out.println(d);  <span class="comment">// flase</span></span><br><span class="line">        System.out.println(c);  <span class="comment">// 5</span></span><br><span class="line">        <span class="comment">//因为短路运算，此处变量c并没有进行自增运算</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P81集合框架_泛型概述</title>
    <url>/2022/12/06/JavaSE/P81%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%B3%9B%E5%9E%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述:"></a>泛型概述:</h1><ul>
<li><p>Java泛型是JDK1.5引入的一个新特性，其本质是参数化类型，把类型作为参数传递。</p>
<br/>
</li>
<li><p>常见形式有泛型类、泛型接口、泛型方法。</p>
<br/>
</li>
<li><p>语法：</p>
<ul>
<li><code>&lt;T,...&gt;</code>T称为类型占位符，表示一种引用类型。<br/></li>
</ul>
</li>
<li><p>好处：</p>
</li>
</ul>
<ol>
<li>提高代码的重用性。</li>
<li>防止类型转换异常，提高代码的安全性。</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P80集合框架_LinkedList的使用</title>
    <url>/2022/12/04/JavaSE/P80%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_LinkedList%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="LinkedList使用："><a href="#LinkedList使用：" class="headerlink" title="LinkedList使用："></a>LinkedList使用：</h1><ul>
<li>双向链表结构实现，增删块，查询慢</li>
<li>LinkedList与ArrayList的对比:<ul>
<li>采取不同的数据结构实现，数据在内存中存储的形式不同:</li>
<li><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221206013723.png"></li>
<li>ArrayList中存储的数据在内存中都是连续的，而LinkedList由于使用的是列表结构，所以元素在内存中不是连续存储的。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;郭富城&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;郭富城&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        linkedList.add(s1);</span><br><span class="line">        linkedList.add(s2);</span><br><span class="line">        linkedList.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+linkedList.size());</span><br><span class="line">        System.out.println(linkedList.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        <span class="comment">//linkedList.remove(new Student(&quot;刘德华&quot;, 20));</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;删除之后：&quot;+linkedList.size());</span></span><br><span class="line">        <span class="comment">//linkedList.clear();</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用for循环遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">            System.out.println(linkedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强for遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object each : linkedList) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) each;</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用迭代器遍历：&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) it.next();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用列表迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用列表迭代器正向遍历：&quot;</span>);</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">lit</span> <span class="operator">=</span> linkedList.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (lit.hasNext()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) lit.next();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用列表迭代器反向遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (lit.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) lit.previous();</span><br><span class="line">            System.out.println(s.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(linkedList.contains(s1));</span><br><span class="line">        System.out.println(linkedList.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//获取下标</span></span><br><span class="line">        System.out.println(linkedList.indexOf(s1));</span><br><span class="line">        System.out.println(linkedList.indexOf(s2));</span><br><span class="line">        System.out.println(linkedList.indexOf(s3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221205001836.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P82集合框架_泛型类</title>
    <url>/2022/12/06/JavaSE/P82%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%B3%9B%E5%9E%8B%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><ul>
<li>泛型类的使用方法:<ul>
<li>在定义类的时候使用泛型定义，当生成实例化对象时可以依据不同需求灵活传入不同的类型来生成需要的实例对象。</li>
</ul>
</li>
<li>定义语法:<code>类名&lt;T&gt;</code>，T表示是类型占位符，表示一种引用类型，如果编写多个，可以用逗号隔开。</li>
<li>注意:<ol>
<li>泛型只能使用引用类型。</li>
<li>不同泛型类型对象之间不能相互复制<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用泛型类创建对象</span></span><br><span class="line">        MyGeneric&lt;String&gt; myGeneric = <span class="keyword">new</span> <span class="title class_">MyGeneric</span>&lt;String&gt;();</span><br><span class="line">        myGengric.t = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        myGeneric.show(<span class="string">&quot;大家好&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span>  <span class="operator">=</span>  myGeneric.getT();</span><br><span class="line"></span><br><span class="line">        MyGenceric&lt;Integer&gt; myGeneric2 = <span class="keyword">new</span> <span class="title class_">MyGeneric</span>&lt;Integer&gt;();</span><br><span class="line">        myGeneric2.t = <span class="number">100</span>;</span><br><span class="line">        myGeneric2.show(<span class="number">200</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> myGeneric2.getT();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGeneric</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">//使用泛型T</span></span><br><span class="line">    <span class="comment">//1创建变量</span></span><br><span class="line">    T t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2作为方法的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3泛型作为方法的返回值</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P83集合框架_泛型接口</title>
    <url>/2022/12/07/JavaSE/P83%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><ul>
<li>泛型接口的使用方法(两种)：<ol>
<li>在定义接口时使用泛型定义，当编写实现类来实现接口中的抽象方法时可以按需求传入不同的类型来重写不同的实现方法。</li>
<li>编写实现类时使用泛型类，此时接口的泛型类型就为实现类实例化时传入的泛型类型。</li>
</ol>
</li>
<li>定义语法:<code>接口名&lt;T&gt;</code>，T表示是类型占位符，表示一种引用类型，如果编写多个，可以用逗号隔开。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyInterfaceImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterfaceImpl</span>();</span><br><span class="line">        impl.server(<span class="string">&quot;A String!&quot;</span>);</span><br><span class="line">        <span class="type">MyInterfaceImpl2</span> <span class="variable">impl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterfaceImpl2</span>&lt;Integer&gt;();</span><br><span class="line">        impl2.server(<span class="number">100</span>);</span><br><span class="line">        <span class="type">MyInterfaceImpl2</span> <span class="variable">impl2_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterfaceImpl2</span>&lt;Float&gt;();</span><br><span class="line">        impl2_.server(<span class="number">3.14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//作为抽象方法的返回值或参数类型</span></span><br><span class="line">    T <span class="title function_">server</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型接口的使用方法1：在实现类定义时就给定T的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="comment">//但实现类给定了T的类型为String后再重写的方法里就默认使用String类型来定义</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">server</span><span class="params">(String t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型接口的使用方法2：在实现类定义时不给定类型，而是使用泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceImpl2</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//此时实现类为泛型类，可以使用T占位符</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">server</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221207020631.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P86集合框架_Set集合使用</title>
    <url>/2022/12/08/JavaSE/P86%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Set%E9%9B%86%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Set-子接口"><a href="#Set-子接口" class="headerlink" title="Set 子接口"></a>Set 子接口</h1><ul>
<li><p>特点：无序、无下标、元素不可重复。</p>
</li>
<li><p>方法：全部继承自Collection中的方法，并未增加方法。</p>
<br/>
</li>
<li><p>Set接口的实现类:</p>
<ul>
<li>HashSet(重点)：<ul>
<li>基于HashCode实现元素不重复。</li>
<li>但存入元素的哈希码表时，会调用equals进行确认，如果结果为true，则拒绝后者存入。</li>
</ul>
</li>
<li>TreeSet：<ul>
<li>基于排列顺序实现元素不重复。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;华为&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据个数：&quot;</span>+set.size());</span><br><span class="line">        System.out.println(set.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历：因为不存在脚标，所以只能使用迭代器或增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强for遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : set) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用迭代器遍历：&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(set.contains(<span class="string">&quot;华为&quot;</span>));</span><br><span class="line">        System.out.println(set.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221208025803.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P84集合框架_泛型方法</title>
    <url>/2022/12/07/JavaSE/P84%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h1><ul>
<li>使用方法:<ul>
<li>定义的泛型方法在调用时不需要指定传入参数的类型，泛型会进行自动装箱操作。</li>
</ul>
</li>
<li>语法:<code>&lt;T&gt; 返回值类型</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyGenericMethod</span> <span class="variable">myGenericMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyGenericMethod</span>();</span><br><span class="line">        myGenericMathod.show(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">        myGenericMathod.show(<span class="number">2000</span>);</span><br><span class="line">        myGenericMathod.(<span class="number">3.14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGenericMothod</span> &#123;</span><br><span class="line">    <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.prinln(<span class="string">&quot;泛型方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P87集合框架_HashSet使用</title>
    <url>/2022/12/13/JavaSE/P87%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_HashSet%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="HashSet实现类"><a href="#HashSet实现类" class="headerlink" title="HashSet实现类:"></a>HashSet实现类:</h1><ul>
<li>HashSet【重点】:<ul>
<li>基于HashCode计算元素存放位置。</li>
<li>当存入元素的哈希码相同时，会调用equals进行确认，如果结果为true,则拒绝后者存入。</li>
<li>存储结构：哈希表(数组+链表+红黑树)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//新建集合</span></span><br><span class="line">        HashSet&lt;String&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;梁朝伟&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;周润发&quot;</span>);</span><br><span class="line">        <span class="comment">//hashSet.add(&quot;刘德华&quot;);   //添加重复的元素会被忽略</span></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+hashSet.size());</span><br><span class="line">        System.out.println(hashSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除数据</span></span><br><span class="line">        <span class="comment">//hashSet.remove(&quot;刘德华&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;删除后:&quot;+hashSet.toString());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历操作</span></span><br><span class="line">        <span class="comment">//1.增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强for循环遍历:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : hashSet) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用增强迭代器遍历:&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(hashSet.contains(<span class="string">&quot;郭富城&quot;</span>));</span><br><span class="line">        System.out.println(hashSet.isEmpty());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20221214001229.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        HashSet&lt;Person&gt; person = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;林志玲&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;梁朝伟&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        person.add(p1);</span><br><span class="line">        person.add(p2);</span><br><span class="line">        person.add(p3);</span><br><span class="line">        <span class="comment">//person.add(p3);    //重复的元素无法添加</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;单个元素：&quot;</span>+person.size());</span><br><span class="line">        System.out.println(person.toString()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span>+name+<span class="string">&quot;,age = &quot;</span>+age+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202302230047290.png"><br>输出显示的元素存储顺序和代码中添加时的顺序不一致，说明集合中的元素是无序存储的，并无法添加重复的元素</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P85集合框架_泛型集合</title>
    <url>/2022/12/08/JavaSE/P85%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%B3%9B%E5%9E%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h1><ul>
<li><p>概念：参数化类型、烈性安全的集合，强制集合元素的类型必须一致。</p>
<br/>
</li>
<li><p>特点：</p>
<ul>
<li>编译时即可检查，而非运行时抛出异常。</li>
<li>访问时，不必类型转换（拆箱）。</li>
<li>不同泛型之间引用不能相互赋值，泛型不存在多态。<br/></li>
</ul>
</li>
<li><p>在使用集合时有时候会因为类型转换原因抛出异常：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList.add(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">arrayList.add(<span class="number">10</span>);</span><br><span class="line">arrayList.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object object : arrayList) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)object;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  因为集合未指定泛型类型，所以在编写这段代码时向集合中添加不同种类型的元素并不会报错，但实际运行时会抛出类型转换异常。</p>
<br/>
</li>
<li><p>为了防止这种情况，可以在初始化集合时就给定泛型类型：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">arrayList.add(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line"><span class="comment">//arrayList.add(10);</span></span><br><span class="line"><span class="comment">//arrayList.add(20);</span></span><br><span class="line"><span class="comment">//给明泛型类型后再添加不同类型的元素会直接报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : arrayList) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)string;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P88集合框架_HashSet存储方式</title>
    <url>/2023/02/25/JavaSE/P88%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_HashSet%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="HashSet存储过程"><a href="#HashSet存储过程" class="headerlink" title="HashSet存储过程:"></a>HashSet存储过程:</h1><ol>
<li>根据hashcode计算保存的位置，如果此位置为空，则直接保存，如果不为空执行第二步。</li>
<li>再执行equals方法，如果equals方法为true，则认为是重复，否则，行程链表。</li>
</ol>
<p><strong>原代码:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        HashSet&lt;Person&gt; person = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;林志玲&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;梁朝伟&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>已知hashset判断是否重复并存储元素的方法依靠hashCode()与equals()两个方法，我们可以在Person类中尝试重写两个方法来改变集合对重复元素的定义，从未使集合更符合我们的需求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写Hashcode方法示例</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="built_in">this</span>.name.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="built_in">this</span>.age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写equals方法示例</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.name.equals(p.getName()) &amp;&amp; <span class="built_in">this</span>.age == p.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.equals(obj);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>重写了两个方法之后的变化:</strong></p>
<ol>
<li>添加：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;梁朝伟&quot;</span>, <span class="number">25</span>));</span><br></pre></td></tr></table></figure>
<p>此时上面的代码不可以向集合中添加元素，因为重写了hashCode方法，此时两个这里new的匿名对象的属性与集合中的对象p3完全一致，所以计算出的哈希码也完全一致，判断为同一个对象不予加入。</p>
<ol start="2">
<li>删除：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.remove(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<p>此时上面的代码可以删除集合中的p1元素，重写方法重新定义了怎样才算是同一个元素，更符合我们对集合的需求。</p>
<ol start="3">
<li>判断：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(person.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>)));</span><br></pre></td></tr></table></figure>
此时上面的代码输出就是为true了，原理同上。</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P90集合框架_TreeSet案例</title>
    <url>/2023/03/05/JavaSE/P90%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_TreeSet%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<ul>
<li>要求：使用TreeSet集合实现字符串按照长度进行排序.</li>
<li>测试例：helloworld zhang lisi wangwu beijing xian nanjing.</li>
<li>实现思路：使用Comparator接口实现定制比较规则.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合，并指定比较规则</span></span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> o1.length()-o2.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> o1.compareTo(o2);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;xian&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;nanjing&quot;</span>);</span><br><span class="line">        <span class="comment">//显示集合内容</span></span><br><span class="line">        System.out.println(treeSet.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303052348569.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P8基础_三元运算符</title>
    <url>/2022/10/26/JavaSE/P8%E5%9F%BA%E7%A1%80_%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><strong>Java中唯一一个三元运算符：条件运算符&amp;emsp;&amp;emsp;?&amp;emsp;:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//x ? y : z</span></span><br><span class="line">        <span class="comment">//如果x==true,则结果为y,否则结果为z</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> score&lt;<span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        System.out.println(type);  <span class="comment">//输出&quot;及格&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P89集合框架_TreeSet实现类</title>
    <url>/2023/02/25/JavaSE/P89%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_TreeSet%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="TreeSet实现类概述"><a href="#TreeSet实现类概述" class="headerlink" title="TreeSet实现类概述"></a>TreeSet实现类概述</h2><ul>
<li>基于排列顺序实现元素不重复。</li>
<li>实现了SortedSet接口，对集合元素自动排序。</li>
<li>元素对象类型必须实现Comparable接口，指定排序规则。</li>
<li>通过CompareTo方法确定是否为重复元素。</li>
</ul>
<h2 id="TreeSet的简单使用"><a href="#TreeSet的简单使用" class="headerlink" title="TreeSet的简单使用"></a>TreeSet的简单使用</h2><ul>
<li>存储结构: 红黑树<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//1添加元素</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数:&quot;</span>+treeSet.size());</span><br><span class="line">        System.out.println(treeSet.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//2删除</span></span><br><span class="line">        <span class="comment">//treeSet.remove(&quot;xyz&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;删除之后:&quot;+treeSet.toString());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//3遍历</span></span><br><span class="line">        <span class="comment">//使用增强for循环</span></span><br><span class="line">        <span class="keyword">for</span> (String string : treeSet) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//4判断</span></span><br><span class="line">        System.out.println(treeSet.contains(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/202302252143205.png"></li>
</ul>
<h2 id="TreeSet如何实现排序"><a href="#TreeSet如何实现排序" class="headerlink" title="TreeSet如何实现排序"></a>TreeSet如何实现排序</h2><ul>
<li><p>TreeSet集合的元素是否重复与排序顺序是根据其元组对象的类中的CompareTo()方法来决定的，因为想要使用TreeSet集合来存储的对象的类必须实现Comparable接口，所以在类中必须重写这个方法，若该方法的返回值为0，则判定为重复元素，关于如怎么规定这些对象的排序法则，就在这包含在个方法里。</p>
</br>

</li>
<li><p>下面使用Person类来演示如何重写CompareTo()方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span>+name+<span class="string">&quot;,age = &quot;</span>+age+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="built_in">this</span>.age - o.getAge();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的compareTo()方法首先比较了两个对象的姓名，如果姓名相同，则比较年龄。如果姓名和年龄都相同，则两个对象被认为是相等的，返回0。</p>
<h2 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h2><ul>
<li>Comparator接口：实现定制比较(比较器)</li>
<li>Comparable：可比较的。</li>
<li>功能：使用比较器就可以不需要元素对象去实现Comparabl接口。</li>
<li>使用方法：在创建集合时使用匿名内部类作为集合构造方法的参数，并定义好元素的比较规则。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合，并指定比较规则</span></span><br><span class="line">        TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line">                <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">                <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xyz&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        persons.add(p1);</span><br><span class="line">        persons.add(p2);</span><br><span class="line">        persons.add(p3);</span><br><span class="line">        System.out.println(persons.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/202302262343323.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P91集合框架_Map集合概述</title>
    <url>/2023/03/08/JavaSE/P91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Map%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303082250580.png"></p>
<ul>
<li>Map接口<ul>
<li>特点：<ol>
<li>用于存储任意键值对</li>
<li>键：无序、无下标、不允许重复（唯一）</li>
<li>值：无序、无下标、允许重复</li>
</ol>
</li>
<li>方法：<ul>
<li>V put(K key, V value)  &#x2F;&#x2F;将对象存入到集合中，关联键值。key重复则覆盖原值。</li>
<li>Object get(Object key)  &#x2F;&#x2F;根据键获取对应的值。</li>
<li>Set&lt;K&gt; keySet()  &#x2F;&#x2F;返回所有key.</li>
<li>Collection&lt;V&gt; values()  &#x2F;&#x2F;返回包含所有的Collection集合。</li>
<li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  &#x2F;&#x2F;键值匹配的Set集合。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Map接口使用"><a href="#Map接口使用" class="headerlink" title="Map接口使用"></a>Map接口使用</h2><ul>
<li>使用Map接口实现的集合，下面演示一些基本操作，以HashMap为例.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//1添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;英国&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;usa&quot;</span>, <span class="string">&quot;美国&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+map.size());</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2删除</span></span><br><span class="line">        <span class="comment">//map.remove(&quot;usa&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;删除之后：&quot;+map.size());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3遍历</span></span><br><span class="line">        <span class="comment">//3.1使用keySet()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------keySet()------&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keyset = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keyset) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;-----&quot;</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2使用entrySet()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----entrySet()-----&quot;</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;------&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4判断</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">&quot;cn&quot;</span>));</span><br><span class="line">        System.out.println(map.containsValue(<span class="string">&quot;泰国&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303082349758.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P93集合框架_TreeMap的使用</title>
    <url>/2023/03/14/JavaSE/P93%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_TreeMap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul>
<li>存储结构：红黑树</li>
<li>可以对Key进行自动排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Student, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> o1.getStuNo() - o2.getStuNo();</span><br><span class="line">                <span class="keyword">return</span> n2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//1添加元素</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">102</span>);</span><br><span class="line">        treeMap.put(s1, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        treeMap.put(s2, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        treeMap.put(s3, <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+treeMap.size());</span><br><span class="line">        System.out.println(treeMap.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2删除</span></span><br><span class="line">        <span class="comment">//treeMap.remove(s3);</span></span><br><span class="line">        <span class="comment">//System.out.println(treeMap.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3遍历</span></span><br><span class="line">        <span class="comment">//3.1使用KeySet()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用KeySet()遍历----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student key :treeMap.keySet()) &#123;</span><br><span class="line">            System.out.println(key.toString()+<span class="string">&quot;-----&quot;</span>+treeMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2使用entrySet()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用entrySet()遍历----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey().toString()+<span class="string">&quot;-----&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4判断</span></span><br><span class="line">        System.out.println(treeMap.containsKey(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">102</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303142011379.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P92集合框架_HashMap的使用</title>
    <url>/2023/03/08/JavaSE/P92%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_HashMap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Map集合的实现类"><a href="#Map集合的实现类" class="headerlink" title="Map集合的实现类"></a>Map集合的实现类</h2><ul>
<li><p>HashMap【重点】：</p>
<ul>
<li>JDK1.2版本，线程不安全，运行效率快；允许使用null作为key或者value.</li>
</ul>
</li>
<li><p>Hashtable：</p>
<ul>
<li>Jdk1.0版本，线程安全，运行效率慢；不允许null作为key或是value.</li>
<li>Properties：<ul>
<li>Hashtable的子类，要求key和value都是String，通常用于配置文件的的读取。</li>
</ul>
</li>
</ul>
</li>
<li><p>TreeMap：</p>
<ul>
<li>实现了SortedMap接口（Map的子接口），可以对key自动排序。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        HashMap&lt;Student, String&gt; students = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">102</span>);</span><br><span class="line">        students.put(s1, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        students.put(s2, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        students.put(s3, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数:&quot;</span>+students.size());</span><br><span class="line">        System.out.println(students.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        <span class="comment">//students.remove(s1);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;删除之后&quot;+students.size());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用keySet();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----使用keySet();-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student key : students.keySet()) &#123;</span><br><span class="line">            System.out.println(key.toString()+<span class="string">&quot;=====&quot;</span>+students.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用entrySet();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----使用entrySet();-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : students.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;=====&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        System.out.println(students.containsKey(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">100</span>)));</span><br><span class="line">        System.out.println(students.containsValue(<span class="string">&quot;杭州&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stuNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> stuNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stuNo = stuNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStuNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuNo</span><span class="params">(<span class="type">int</span> stuNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuNo = stuNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuNo=&quot;</span> + stuNo +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> stuNo == student.stuNo &amp;&amp; Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, stuNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap集合在添加元素时会遇到和HashSet集合一样的重复元素判断问题，这时候需要重写hashCode()和equals()方法来解决。<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303090105871.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P94集合框架_Collections工具类</title>
    <url>/2023/03/14/JavaSE/P94%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_Collections%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h2><ul>
<li>概念: 集合工具类，定义了除了存取以外的集合常用方法。</li>
<li>方法:<ul>
<li><code>public static void reverse(List&lt;?&gt; list)</code> &#x2F;&#x2F;反转集合中元素的顺序</li>
<li><code>public static void shuffle(List&lt;?&gt; list)</code> &#x2F;&#x2F;随机重置集合元素的顺序</li>
<li><code>public static void sort(List&lt;T&gt; list)</code>  &#x2F;&#x2F;升序排序（元素类型必须实现Comparable接口）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//sort排序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序之前：&quot;</span>+list.toString());</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序之后：&quot;</span>+list.toString());</span><br><span class="line">        <span class="comment">//sort方法还支持第二个参数为比较器的定制规则比较的重载</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//binarySearch二分查找</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(list, <span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;30的下标：&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//copy复制</span></span><br><span class="line">        List&lt;Integer&gt; dest = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k &lt; list.size();k++) &#123;</span><br><span class="line">            dest.add(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="comment">//copy方法要求拷贝目标必须和源集合大小一致，这个循环是为了保证目标集合和源集合大小一致</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝之后(dest)：&quot;</span>+dest.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reverse反转</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转之后(list)：&quot;</span>+list.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//shuffle打乱</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;打乱之后(list)：&quot;</span>+list.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----补充----&quot;</span>);</span><br><span class="line">        <span class="comment">//集合转为数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----集合转为数组----&quot;</span>);</span><br><span class="line">        Integer[] arr = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;数组长度:&quot;</span>+arr.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组转为集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----数组转为集合----&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list2 = Arrays.asList(names);</span><br><span class="line">        <span class="comment">//注:当数组转为集合后集合会变成一个受限集合，不允许修改或删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合大小:&quot;</span>+list2.size());</span><br><span class="line">        System.out.println(list2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/202303161918481.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P95集合框架_总结</title>
    <url>/2023/03/16/JavaSE/P95%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6_%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="集合框架总结"><a href="#集合框架总结" class="headerlink" title="集合框架总结"></a>集合框架总结</h2><ul>
<li>集合的概念：<ul>
<li>对象的容器，和数组类似，定义了对多个对象进行操作的常用方法。</li>
</ul>
</li>
<li>List集合：<ul>
<li>有序、有下标、元素可以重复。(ArrayList、LinkedList、Vector)</li>
</ul>
</li>
<li>Set集合：<ul>
<li>无序、无下标、元素补课重复。(HashSet、TreeSet)</li>
</ul>
</li>
<li>Map集合：<ul>
<li>存储一对数据，无序、无下标、键不可重复，值可以重复。(HashMap、HashTable、TreeMap)</li>
</ul>
</li>
<li>Collections：<ul>
<li>集合工具类，定义了除了存取以外的集合常用方法。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P96IO流_什么是流</title>
    <url>/2023/03/21/JavaSE/P96IO%E6%B5%81_%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%81/</url>
    <content><![CDATA[<h1 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h1><ul>
<li>概念：内存与存储设备之间传输数据的通道</li>
<li>流的分类:<ul>
<li>按方向【重点】:<ul>
<li>输入流：将&lt;存储设备&gt;中的内容读入到&lt;内存&gt;中。</li>
<li>输出流：将&lt;内存&gt;中的内容写入到&lt;存储设备&gt;中。</li>
</ul>
</li>
<li>按单位：<ul>
<li>字节流：一字节为单位，可以读写所有数据。</li>
<li>字符流：以字符为单位，只能读写文本数据。</li>
</ul>
</li>
<li>按功能：<ul>
<li>节点流：具有实际传输数据的读写功能。</li>
<li>过滤流：在节点流的基础之上增强的功能。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P97IO流_字节流</title>
    <url>/2023/04/23/JavaSE/P97IO%E6%B5%81_%E5%AD%97%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="字节流抽象类"><a href="#字节流抽象类" class="headerlink" title="字节流抽象类"></a>字节流抽象类</h2><ul>
<li>字节流的父类(抽象类):<br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230423194008.png"></li>
<li>字节流有分为个父类，一种用来输入，一种用来输出。</li>
</ul>
<h2 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h2><ul>
<li>文件字节流属于字节流的一个<strong>实现类</strong>:</li>
<li>FileInputStream字节输入流:<ul>
<li><code>public int read(byte[] b)</code> &#x2F;&#x2F;从流中读取多格字节，将读到的内容存入b数组，会返回实际读到的字节数；如果读到文件的尾部，则会返回-1。</li>
</ul>
</li>
<li>FileOutputStream字节输出流：<ul>
<li><code>public void write(byte[] b)</code> &#x2F;&#x2F;一次写多个字节，将b数组中所有字节，写入输出流。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P98IO流_文件字节输入输出流的使用</title>
    <url>/2023/04/24/JavaSE/P98IO%E6%B5%81_%E6%96%87%E4%BB%B6%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="文件字节输入流FileInputStream"><a href="#文件字节输入流FileInputStream" class="headerlink" title="文件字节输入流FileInputStream:"></a>文件字节输入流FileInputStream:</h2><blockquote>
<p>FileInputStream属于输入字节流的一个实现类，可以实现从文件中读取字节数据。</p>
</blockquote>
<ul>
<li><p><strong>实例化：</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1创建FileInputStream</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;文件路径&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>实例化fis对象时使用一个参数的构造方法，参数为文件路径，参数中的文件可能不存在，所以需要注意方法可能需要抛出异常。</p>
</li>
<li><p><strong>读取：</strong></p>
<ul>
<li>可以使用循环，一次一个字节读取  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>也可以一次性读取多个字节，将数据存入数组中  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((count3 = fis.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>关闭</strong></p>
<ul>
<li>IO流属于系统资源使用完毕需要关闭<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fis.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1创建FileInputStream</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\aaa.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2读取文件</span></span><br><span class="line">        <span class="comment">//2.1按一次一个字节的方式读取</span></span><br><span class="line">        <span class="comment">/*int data = 0;</span></span><br><span class="line"><span class="comment">        while((data=fis.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(data);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//2.2一次读取多个字节</span></span><br><span class="line">        <span class="comment">/*byte[] buf = new byte[3];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int count = fis.read(buf);</span></span><br><span class="line"><span class="comment">        System.out.println(new String(buf));</span></span><br><span class="line"><span class="comment">        int count2 = fis.read(buf);</span></span><br><span class="line"><span class="comment">        System.out.println(new String(buf));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(&quot;count = &quot;+count);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;count2 = &quot;+count2);*/</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((count3 = fis.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count3));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        fis.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230425194533.png"></p>
<hr>
<h2 id="文件字节输出流FileOutputStream"><a href="#文件字节输出流FileOutputStream" class="headerlink" title="文件字节输出流FileOutputStream:"></a>文件字节输出流FileOutputStream:</h2><blockquote>
<p>FileOutputStream属于输入字节流的一个实现类，可以实现向文件中写入字节数据。</p>
</blockquote>
<ul>
<li><p><strong>实例化:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件路径&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>设置构造方法第二个参数为true，表示不覆盖连续写入</p>
</li>
<li><p><strong>文件写入write()方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写入</span></span><br><span class="line">fos.write(<span class="number">97</span>);</span><br><span class="line">fos.write(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">fos.write(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span><span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">fos.write(string.getBytes());</span><br></pre></td></tr></table></figure></li>
<li><p><strong>关闭:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\bbb.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        fos.write(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        fos.write(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span><span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">        fos.write(string.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230524214010.png"><br><img src="https://raw.githubusercontent.com/porridge42/picgo/main/20230524214043.png"></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P9999JavaSE总结</title>
    <url>/2023/01/01/JavaSE/P999JavaSE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h1><h2 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h2><ul>
<li>Java三大版本<ul>
<li>Java SE</li>
<li>Java ME</li>
<li>Java EE</li>
</ul>
</li>
<li>JDK Java开发者工具包: 环境变量的配置</li>
<li>JRE Java运行环境</li>
</ul>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul>
<li>javac Hello.java CMD生成class文件</li>
<li>java Hello 运行第一个Java程序</li>
<li>编译型语言：C C++…</li>
<li>解释型语言；Java JS Python…</li>
<li>IDEA：IDE集成开发环境</li>
</ul>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li>注释<ul>
<li>行内注释  &#x2F;&#x2F;</li>
<li>多行注释  &#x2F;* *&#x2F;</li>
<li>文档注释  &#x2F;** *&#x2F;   javadoc生成帮助文档</li>
</ul>
</li>
<li>标识符<ul>
<li>关键字</li>
</ul>
</li>
<li>数据类型<ul>
<li>基本数据类型<ol>
<li>整数<ul>
<li>byte 1</li>
<li>short 2</li>
<li>int 4</li>
<li>long 8</li>
</ul>
</li>
<li>浮点数<ul>
<li>float 4</li>
<li>double 8</li>
</ul>
</li>
<li>字符<ul>
<li>char 2</li>
</ul>
</li>
<li>布尔值<ul>
<li>booleance 1</li>
</ul>
</li>
</ol>
</li>
<li>引用数据类型<ol>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ol>
</li>
<li>类型转换<ul>
<li>自动类型转换：低转高</li>
<li>强制类型转换：高转低 (低)高</li>
</ul>
</li>
<li>转义字符<ul>
<li><code>\b</code> backspace</li>
<li><code>\n</code> 换行</li>
<li><code>\r</code> 回车</li>
<li><code>\t</code> tab</li>
<li><code>\&#39;</code> 单引号</li>
<li><code>\&quot;</code> 双引号</li>
<li><code>\\</code> 反斜杠</li>
</ul>
</li>
<li>变量和常量<ul>
<li>变量的定义<ul>
<li><code>type varName[=value];</code></li>
</ul>
</li>
<li>作用域<ul>
<li>类变量</li>
<li>实例变量</li>
<li>局部变量</li>
</ul>
</li>
<li>常量<ul>
<li>final MAX A &#x3D; 10;</li>
</ul>
</li>
<li>命名规范<ol>
<li>见名知意</li>
<li>驼峰命名(变量名，方法名)</li>
<li>类名(首字母大写驼峰)</li>
<li>常量(大写字母+下划线)</li>
<li>不要使用拼音</li>
</ol>
</li>
</ul>
</li>
<li>运算符<ul>
<li>算数运算符<ul>
<li><code>+ - * /</code></li>
</ul>
</li>
<li>赋值运算符<ul>
<li><code>=</code></li>
</ul>
</li>
<li>关系运算符<ul>
<li><code>&gt; &lt; &gt;= &lt;= == != instanceof</code></li>
</ul>
</li>
<li>逻辑运算符<ul>
<li><code>&amp;&amp; || !</code></li>
</ul>
</li>
<li>位运算符<ul>
<li><code>&amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</code></li>
</ul>
</li>
<li>条件运算符<ul>
<li><code>? :</code></li>
</ul>
</li>
<li>扩展运算符<ul>
<li><code>+= -= *= /=</code></li>
</ul>
</li>
</ul>
</li>
<li>包机制<ul>
<li>域名倒写</li>
<li>防止命令冲突</li>
<li>package 定义包 第一行</li>
<li>import 导入包 第二行</li>
</ul>
</li>
<li>JavaDoc<ul>
<li>JDK 帮助文档</li>
<li>javadoc<ul>
<li>@author 作者</li>
<li>@Version 版本</li>
<li>@Since 最早支持的JDK版本</li>
<li>@param 参数</li>
<li>@return 返回值</li>
<li>@throws 抛出的异常</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul>
<li>Scanner 用户交互System.in</li>
<li>顺序结构<ul>
<li>程序默认的结构，自上而下的执行</li>
</ul>
</li>
<li>选择结构<ul>
<li>if单选则结构</li>
<li>if-else双选择结构</li>
<li>if-else if-else多选择结构</li>
<li>switch <ul>
<li>jdk支持了String类型</li>
<li>case穿透现象</li>
<li>break</li>
<li>default</li>
</ul>
</li>
</ul>
</li>
<li>循环结构<ul>
<li>while<ul>
<li>尽量避免死循环</li>
</ul>
</li>
<li>do-while</li>
<li>for<ul>
<li><code>for (int i = 0; i&lt;100; i++)</code></li>
<li>九九乘法表</li>
</ul>
</li>
<li>增强for循环for-each</li>
</ul>
</li>
<li>break &amp; continue &amp; return<ul>
<li>break：跳出循环</li>
<li>countinue：终止当次循环</li>
<li>return：结束方法的运行</li>
</ul>
</li>
<li>方法<ul>
<li>什么是方法</li>
<li>方法的定义<ul>
<li><code>修饰符 返回值 方法名(参数列表)&#123;return 返回值;&#125;</code></li>
</ul>
</li>
<li>方法的调用<ul>
<li>类名.方法名</li>
<li>对象名.方法名</li>
</ul>
</li>
<li>方法重载<ul>
<li>名字相同，参数列表不同</li>
</ul>
</li>
<li>命令行传参<ul>
<li>给main方法传递参数</li>
</ul>
</li>
<li>可变长参数<ul>
<li>…</li>
<li>必须放在最后一个参数</li>
</ul>
</li>
<li>递归<ul>
<li>自己调用自己，给自己一个出口</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>数组的定义<ul>
<li>new int[5]</li>
<li>{1,2,3,4,5}</li>
<li>必须是用一个类型</li>
</ul>
</li>
<li>数组的使用<ul>
<li>通过下标访问</li>
<li>ArrayIndexOutOfBounds</li>
<li>增强for循环遍历</li>
</ul>
</li>
<li>二维数组 <code>int[][]</code></li>
<li>Arrays工具类</li>
<li>排序算符<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
<li>快速排序</li>
<li>归并排序</li>
<li>希尔排序</li>
<li>堆排序</li>
<li>基数排序</li>
</ul>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>什么是面向对象</li>
<li>类与对象<ul>
<li>类是对象的抽象</li>
<li>对象的类的具体</li>
</ul>
</li>
<li>构造方法<ul>
<li>构造的重载</li>
<li>默认无参构造</li>
<li>如果手动定义了有参构造，就必须要手动再加一个无参构造</li>
<li>单例模式，需要构造器私有</li>
</ul>
</li>
<li>new 对象<ul>
<li>栈存放引用</li>
<li>堆存放具体的对象</li>
</ul>
</li>
<li>封装<ul>
<li>该露的露该藏的藏</li>
<li>属性私有,get,set</li>
</ul>
</li>
<li>继承<ul>
<li>extends关键字</li>
<li>Object祖宗类</li>
<li>子类拥有父类的全部特征</li>
<li>方法重写</li>
<li>this</li>
<li>super</li>
<li>Java是单继承，只能继承一个父类，但是能继承多个接口</li>
</ul>
</li>
<li>多态<ul>
<li>父类的引用指向子类的对象<code>Person person = new Student();</code></li>
<li>instanceof关键字，如果匹配可以进行类型之间的转换</li>
</ul>
</li>
<li>修饰符<ul>
<li>public</li>
<li>protected</li>
<li>private</li>
<li>static</li>
<li>abstract</li>
<li>final</li>
</ul>
</li>
<li>接口<ul>
<li>interface 关键字</li>
<li>约束，只能定义方法名</li>
<li>子类实现接口必须重写其中的方法</li>
<li>只有一个方法的接口叫做函数式接口，可以使用lambda表达式简化</li>
<li>接口欧比抽象类更抽象</li>
<li>一个类可以实现多个接口</li>
</ul>
</li>
<li>内部类<ul>
<li>局部内部类</li>
<li>静态内部类</li>
<li>匿名内部类(重点)</li>
</ul>
</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>Throwable<ul>
<li>Exception<ul>
<li>运行时异常<ul>
<li>1&#x2F;0</li>
<li>ClassNotFound</li>
<li>NullPoint</li>
<li>UnknowType</li>
<li>数序下标越界</li>
<li>…</li>
</ul>
</li>
<li>检查性异常</li>
</ul>
</li>
<li>Error<ul>
<li>AWT错误</li>
<li>JVM错误<ul>
<li>StackOverFlow</li>
<li>OutOfMemary</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>五个关键字<ul>
<li>try{}</li>
<li>catch(){}：先小后大</li>
<li>finally{}</li>
<li>throw：手动抛出异常</li>
<li>throws：方法抛出异常</li>
</ul>
</li>
<li>自定义异常<ul>
<li>继承Exception类即可</li>
</ul>
</li>
</ul>
<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><ul>
<li>Object类<ul>
<li>hashcode()</li>
<li>toString()</li>
<li>clone()</li>
<li>getClass()</li>
<li>notify()</li>
<li>wait()</li>
<li>equals()</li>
</ul>
</li>
<li>Math类<ul>
<li>常见的数学运算</li>
</ul>
</li>
<li>Random类<ul>
<li>生成随机数</li>
<li>UUID</li>
</ul>
</li>
<li>File类<ul>
<li>创建文件</li>
<li>查看文件</li>
<li>修改文件</li>
<li>删除文件</li>
</ul>
</li>
<li>包装类<ul>
<li>自动装箱和拆箱</li>
</ul>
</li>
<li>Date类<ul>
<li>Date</li>
<li>SimpleDateFormat：<code>yyyy-mm-dd hh:mm:ss</code></li>
<li>Calendar(建议使用)</li>
</ul>
</li>
<li>String类<ul>
<li>不可变性 fianl</li>
</ul>
</li>
<li>StringBuffer<ul>
<li>可变长 append()  多线程数据量较大 效率低，安全</li>
</ul>
</li>
<li>StringBuilder<ul>
<li>可变长 单线程数据量较大  效率高，不安全</li>
</ul>
</li>
<li>String str &#x3D; “a” + 1</li>
<li>String str &#x3D; ‘a’ + 1 + 2</li>
<li>String str &#x3D; 1 + 2 + “a”</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>P99IO流_字节流复制文件</title>
    <url>/2023/05/24/JavaSE/P99IO%E6%B5%81_%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="字节流案例演示"><a href="#字节流案例演示" class="headerlink" title="字节流案例演示"></a>字节流案例演示</h2><ul>
<li>使用文件字节流实现对文件的复制<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;输入文件路径&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;输出文件路径&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>定义一个缓冲区，一个整型变量计数，使用循环一边读一边写。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((count = fis.read(buf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buf,<span class="number">0</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>关闭流<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3关闭</span></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br><span class="line">System.out.println(<span class="string">&quot;复制完毕&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1实例化: 文件字节输入流，文件字节输出流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo3\\001.JPG&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\23971\\Desktop\\IdeaProjects\\IOstream\\files\\Demo3\\002.JPG&quot;</span>);</span><br><span class="line">        <span class="comment">//2一边读一边写</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((count = fis.read(buf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buf,<span class="number">0</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3关闭</span></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;复制完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>P9基础_包机制</title>
    <url>/2022/10/26/JavaSE/P9%E5%9F%BA%E7%A1%80_%E5%8C%85%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><ul>
<li><p><strong>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</strong></p>
</li>
<li><p><strong>包的作用类似文件夹，语法格式：</strong></p>
<blockquote>
<p>package pkg1[. pkg2[. pkg3…]];</p>
</blockquote>
</li>
<li><p><strong>一般使用公司域名倒置作为包名。</strong></p>
</li>
<li><p><strong>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”语句可完成此功能</strong></p>
<blockquote>
<p>import package1[.package2…].(classname|*);</p>
</blockquote>
</li>
<li><p><strong>注：”*”为通配符，用法如下：</strong></p>
<blockquote>
<p>import com.baidu.base.*; &amp;emsp; &#x2F;&#x2F;导入base包下的所有类</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网站</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
</search>
